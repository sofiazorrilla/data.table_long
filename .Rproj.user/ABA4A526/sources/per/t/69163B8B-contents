---
title: "Importar y exportar datos"
---

## Crear un objeto data.table

Un objeto data.table se puede definir, por ejemplo:

```{r}
library(data.table)

DT = data.table(
  ID = c("b","b","b","a","a","c"),
  a = 1:6,
  b = 7:12,
  c = 13:18
)

DT
```

<br>

::: {.callout-note collapse="true"}
## Reto

Imaginemos que queremos crear una simulación de una base de datos de secuencias aleatorias. La tabla que queremos al final va a tener dos columnas, la primera es un número identificador de cada secuencia y la segunda la secuencia aleatoria de tamaño 300. Por ejemplo, la siguiente tabla muestra las primeras 10 filas del resultado esperado. 

```{r}
#| echo: false 
#| message: false

library(data.table)

secuencias <- data.table(
                id = seq(1,10000), 
                sequencia = sapply(seq(1, 10000), function(x) paste(sample(c("A", "T", "C", "G"), 100, replace = TRUE), collapse = "")))

head(secuencias) |> knitr::kable()

```

**Ejercicio:** Genera un objeto data.table en el que la primera columna sea un id de secuencia y la segunda sea una secuencia (aleatoria) de tamaño 300 caracteres

:::

::: {.callout-note collapse="true"}
## Respuesta

```{r}
secuencias <- data.table(
                id = seq(1,10000), 
                sequencia = sapply(seq(1, 10000), function(x) paste(sample(c("A", "T", "C", "G"), 100, replace = TRUE), collapse = "")))

head(secuencias)
```
:::


<br>

## Importar y exportar datos de archivos

Las funciones para importar (`fread`) y exportar (`fwrite`) tienen las siguientes opciones principales:

- `x`: el objeto que queremos exportar.

- `file`: ruta para escribir/leer el archivo.

- `sep`: el delimitador entre columnas.

Nota: La función tiene muchos argumentos que pueden ayudarte a personalizar el proceso de cargar datos en R. 

```{.r}
fread(input, file, text, cmd, sep="auto", sep2="auto", dec=".", quote="\"",
     nrows=Inf, header="auto",
     na.strings=getOption("datatable.na.strings","NA"),  # due to change to ""; see NEWS
     stringsAsFactors=FALSE, verbose=getOption("datatable.verbose", FALSE),
     skip="__auto__", select=NULL, drop=NULL, colClasses=NULL,
     integer64=getOption("datatable.integer64", "integer64"),
     col.names,
     check.names=FALSE, encoding="unknown",
     strip.white=TRUE, fill=FALSE, blank.lines.skip=FALSE,
     key=NULL, index=NULL,
     showProgress=getOption("datatable.showProgress", interactive()),
     data.table=getOption("datatable.fread.datatable", TRUE),
     nThread=getDTthreads(verbose),
     logical01=getOption("datatable.logical01", FALSE),  # due to change to TRUE; see NEWS
     keepLeadingZeros = getOption("datatable.keepLeadingZeros", FALSE),
     yaml=FALSE, autostart=NA, tmpdir=tempdir(), tz="UTC"
     )

```

### Conjunto de datos

En esta y la siguiente sección vamos a trabajar una tabla de todos los especímenes de plantas que tiene registrados la plataforma GBIF (Global Biodiversity Information Facility) para México. Específicamente esta tabla solo contiene los registros de plantas que tienen un especímen guardado en alguna colección biológica y que tienen coordenadas que nos permitan ubicarlos.


**Ejemplo**: Por ejemplo, podemos importar la tabla original de plantae_mexico_conCoords_specimen.csv que tiene 3062756 registros y 50 filas. 

[Link](https://api.gbif.org/v1/occurrence/download/request/0038585-240506114902167.zip) para descargar la tabla completa. Descargarás una carpeta zip en donde viene el archivo de ocurrencias en formato Darwin Core (separado por comas)

**Nota:** `fread()` también permite leer archivos comprimidos `.gz`

```{.r}
library(data.table)

data = fread("data/plantae_mexico_conCoords_specimen.csv", quote="")

head(data) |> knitr::kable()
```

```{r}
#| echo: false
#| warning: false

library(data.table)

fread("data/head_registros.csv") |> knitr::kable()

```

<br>

::: {.callout-note collapse="true"}
## Reto


Utiliza el código anterior para cargar la tabla de especímenes en tu computadora. 

Nota: La tabla tiene más de 3 millones de registros y, en las pruebas que hicimos, observamos que la tabla ocupa 1.72 GB de memoria cuando se carga. Incluimos un subconjunto aleatorio de 100,000 filas (sub_100000_plantae_mexico_conCoords_specimen.csv) para los que quieran practicar con objetos que ocupen menos memoria. 

:::

## Exportar

data.table también tiene una función optimizada para escribir los datos con los que estamos trabajando en forma de archivo. Los argumentos básicos son:

- `x` = objeto que se quiere exportar como archivo
- `file` = nombre del archivo
- `sep` = caracter que se quiere utilizar como delimitador de campo
- `compress` = debido a que podríamos estar trabajando con tablas de datos muy grandes podemos escribir los archivos comprimidos. Se puede especificar "gzip" o "auto" y utilizar la extension `.gz` en el nombre del archivo para escribir un archivo comprimido, la opción "none" nos permite escribir archivos sin comprimir. 

**Ejemplo**: podemos escribir la tabla DT que creamos al principio de la sección:

```{.r}
fwrite(DT, "data/testDT.csv", sep = ",")
```

<br>

::: {.callout-note collapse="true"}
## Ejercicio

Exporta la tabla de registros de especimenes como un archivo comprimido.

:::

::: {.callout-note collapse="true"}
## Respuesta

```{.r}
fwrite(data, "data/sub_100000_plantae_mexico_conCoords_specimen.csv.gz", sep = ",", compress = "auto")
```

:::

## Velocidad dplyr vs data.table

```{.r}

library(rbenchmark)

test = benchmark("r base" = {
            read.csv("big_data/plantae_mexico_conCoords_specimen.csv")
          },
          "data.table" = {
            fread("big_data/plantae_mexico_conCoords_specimen.csv")
          },
          replications = 10,
          columns = c("test", "replications", "elapsed",
                      "relative", "user.self", "sys.self"))

```
**Nota:** Si quieres correr este código revisa cuántas réplicas quieres hacer porque está escrito para leer la tabla de registros grande 10 veces utilizando cada método. 

```{r}
#| echo: false
#| warning: false
#| eval: true

read.csv("data/benchmark_results.csv") |> knitr::kable()
```

::: {.callout-note collapse="true"}
## Reto

Si quieres, puedes revisar el tiempo que te toma cargar la base de datos XX utilizando read.csv y fread. Utiliza el comando de benchmark de la paquetería rbenchmark para contar el tiempo. Nota: en el número de réplicas puedes poner una o dos porque si no te vas a tardar mucho. 

:::

<br>

## data.frame - data.table

El objeto de data.table es un objeto basado en un data.frame, por lo tanto es compatible con las funciones de R base que trabajan con data.frame. 

```{.r}
str(data)
```
```
Classes ‘data.table’ and 'data.frame':  3062756 obs. of  23 variables:
 $ gbifID                          :integer64 2825623524 2825649445 2825649446 2825649447 2825649448 2825649449 2825649452 2825649453 ... 
 $ occurrenceID                    : chr  "TAIF:PLANT:318128:1:1:411555" "TAIF:PLANT:318579:1:1:411579" "TAIF:PLANT:318694:1:1:411603" "TAIF:PLANT:318705:1:1:411602" ...
 $ phylum                          : chr  "Tracheophyta" "Tracheophyta" "Tracheophyta" "Tracheophyta" ...
 $ class                           : chr  "Polypodiopsida" "Polypodiopsida" "Polypodiopsida" "Polypodiopsida" ...
 $ order                           : chr  "Polypodiales" "Polypodiales" "Polypodiales" "Polypodiales" ...
 $ family                          : chr  "Pteridaceae" "Pteridaceae" "Polypodiaceae" "Aspleniaceae" ...
 $ genus                           : chr  "Adiantum" "Scoliosorus" "Pleopeltis" "Asplenium" ...
 $ species                         : chr  "Adiantum andicola" "Scoliosorus ensiformis" "Pleopeltis polylepis" "Asplenium monanthes" ...
 $ infraspecificEpithet            : chr  "" "" "interjecta" "" ...
 $ taxonRank                       : chr  "SPECIES" "SPECIES" "VARIETY" "SPECIES" ...
 $ scientificName                  : chr  "Adiantum andicola Liebm." "Scoliosorus ensiformis (Hook.) T.Moore" "Pleopeltis polylepis var. interjecta (Weath.) E.A.Hooper" "Asplenium monanthes L." ...
 $ verbatimScientificName          : chr  "Adiantum andicola Liebm." "Scoliosorus ensiformis (Hook.) T. Moore" "Pleopeltis polylepis (Roem. ex Kunze) T. Moore var. interjecta (Weath.) E. A. Hooper" "Asplenium monanthes L." ...
 $ verbatimScientificNameAuthorship: chr  "" "" "" "" ...
 $ countryCode                     : chr  "MX" "MX" "MX" "MX" ...
 $ stateProvince                   : chr  "Oaxaca (瓦哈卡州)" "Oaxaca (瓦哈卡州)" "Oaxaca (瓦哈卡州)" "Oaxaca (瓦哈卡州)" ...
 $ decimalLatitude                 : num  17.3 17.3 17.4 17.4 17.3 ...
 $ decimalLongitude                : num  -96.4 -96.4 -96.4 -96.4 -96.4 ...
 $ coordinateUncertaintyInMeters   : num  NA NA NA NA NA NA NA NA NA NA ...
 $ elevation                       : num  2267 2267 2959 2820 2267 ...
 $ day                             : int  27 27 29 29 27 1 27 27 5 1 ...
 $ month                           : int  2 2 2 2 2 3 2 2 5 3 ...
 $ year                            : int  2012 2012 2012 2012 2012 2012 2012 2012 2000 2012 ...
 $ basisOfRecord                   : chr  "PRESERVED_SPECIMEN" "PRESERVED_SPECIMEN" "PRESERVED_SPECIMEN" "PRESERVED_SPECIMEN" ...
 - attr(*, ".internal.selfref")=<externalptr> 
 - attr(*, "index")= int(0) 
  ..- attr(*, "__genus")= int [1:3062756] 419 423 490 494 513 514 521 542 571 585 ...

```

Sin embargo, los objetos se pueden cambiar de clase utilizando `as.data.frame` y `setDF` para convertir a data frame o `as.data.table` y `setDT` para convertir a data.table. Por ejemplo: 

```{r}
library(magrittr)

# Recuerda que DT es el objeto data.table que definimos al principio de la lección

as.data.frame(DT) %>% class()

as.data.frame(DT) %>% as.data.table() %>% class()

as.data.frame(DT) %>% setDT(DT) %>% class()
```

La diferencia entre las funciones `set` y las funciones `as.` es que la primera modifica directamente la tabla de referencia guardada en la memoria (no genera una copia) mientras que la segunda genera una nueva copia del objeto. 

