{
  "hash": "201051862d73580e71d9abfe65101a96",
  "result": {
    "markdown": "---\ntitle: \"Uniones entre tablas\"\n---\n\n\n## Función `merge`\n\nHay dos formas de escribir uniones entre tablas usando `data.table`. La primera es mediante la función `merge()` de r base. Los argumentos básicos de esta función son:\n\n```\nmerge(x, y, by = intersect(names(x), names(y)),\n      by.x = by, by.y = by, all = FALSE, all.x = all, all.y = all,\n      sort = TRUE, suffixes = c(\".x\",\".y\"), no.dups = TRUE,\n      incomparables = NULL, ...)\n\n```\n\n`x`, `y` = son los objetos data.table que se quieren unir\n\n`by`, `by.x`, `by.y` = nombres de las columnas que funcionan como índice para hacer la unión. Cuando ambas tablas tienen el mismo nombre de columna se utiliza by, cuando no, se puede especificar el nombre en x (by.x) y el nombre en y (by.y)\n\n`all`, `all.x`, `all.y` = especifican el tipo de unión. all = T es para hacer full join (mantiene todas las filas de ambas tablas), all.x = T es para hacer left join (mantiene todas las filas de la tabla x), all.y es para hacer right join (mantiene todas las filas de y), all = F es para hacer inner join (solo mantiene las filas que están en ambas tablas)\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(data.table)\n\ndt1 = data.table(id = seq(1,10), letter1 = LETTERS[sample(1:10, replace = T)])\n\ndt2 = data.table(id = seq(6,15), letter2 = LETTERS[sample(1:10, replace = T)])\n\ndt1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n       id letter1\n    <int>  <char>\n 1:     1       J\n 2:     2       J\n 3:     3       C\n 4:     4       H\n 5:     5       B\n 6:     6       H\n 7:     7       I\n 8:     8       G\n 9:     9       E\n10:    10       G\n```\n:::\n\n```{.r .cell-code}\ndt2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n       id letter2\n    <int>  <char>\n 1:     6       H\n 2:     7       J\n 3:     8       G\n 4:     9       G\n 5:    10       A\n 6:    11       D\n 7:    12       H\n 8:    13       C\n 9:    14       C\n10:    15       H\n```\n:::\n\n```{.r .cell-code}\n# inner join\nmerge(dt1,dt2,by = \"id\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nKey: <id>\n      id letter1 letter2\n   <int>  <char>  <char>\n1:     6       H       H\n2:     7       I       J\n3:     8       G       G\n4:     9       E       G\n5:    10       G       A\n```\n:::\n\n```{.r .cell-code}\n# left join\nmerge(dt1,dt2,by = \"id\", all.x = T)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nKey: <id>\n       id letter1 letter2\n    <int>  <char>  <char>\n 1:     1       J    <NA>\n 2:     2       J    <NA>\n 3:     3       C    <NA>\n 4:     4       H    <NA>\n 5:     5       B    <NA>\n 6:     6       H       H\n 7:     7       I       J\n 8:     8       G       G\n 9:     9       E       G\n10:    10       G       A\n```\n:::\n\n```{.r .cell-code}\n# right join\nmerge(dt1,dt2,by = \"id\", all.y = T)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nKey: <id>\n       id letter1 letter2\n    <int>  <char>  <char>\n 1:     6       H       H\n 2:     7       I       J\n 3:     8       G       G\n 4:     9       E       G\n 5:    10       G       A\n 6:    11    <NA>       D\n 7:    12    <NA>       H\n 8:    13    <NA>       C\n 9:    14    <NA>       C\n10:    15    <NA>       H\n```\n:::\n\n```{.r .cell-code}\n# full join\nmerge(dt1,dt2,by = \"id\", all = T)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nKey: <id>\n       id letter1 letter2\n    <int>  <char>  <char>\n 1:     1       J    <NA>\n 2:     2       J    <NA>\n 3:     3       C    <NA>\n 4:     4       H    <NA>\n 5:     5       B    <NA>\n 6:     6       H       H\n 7:     7       I       J\n 8:     8       G       G\n 9:     9       E       G\n10:    10       G       A\n11:    11    <NA>       D\n12:    12    <NA>       H\n13:    13    <NA>       C\n14:    14    <NA>       C\n15:    15    <NA>       H\n```\n:::\n:::\n\n\n\n## Sintaxis de `data.table`\n\nLa segunda forma de hacer uniones entre tablas es usando la sintaxis de data.table. \n\n```\nDT1[DT2, nomatch = 0]\n```\n\nSi lo traducimos a la sintaxis de la función anterior entonces la tabla que está por fuera es `x`, la tabla que está por dentro es `y` y el argumento `nomatch` te permite indicar qué hacer con las claves para las que no encuentra coincidencia en ambas tablas. Cuando `nomatch = 0` no incluye las claves que no se comparten entre tablas. \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# inner join\ndt1[dt2, on = \"id\", nomatch=0]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n      id letter1 letter2\n   <int>  <char>  <char>\n1:     6       H       H\n2:     7       I       J\n3:     8       G       G\n4:     9       E       G\n5:    10       G       A\n```\n:::\n\n```{.r .cell-code}\n# left join\ndt1[dt2, on = \"id\"]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n       id letter1 letter2\n    <int>  <char>  <char>\n 1:     6       H       H\n 2:     7       I       J\n 3:     8       G       G\n 4:     9       E       G\n 5:    10       G       A\n 6:    11    <NA>       D\n 7:    12    <NA>       H\n 8:    13    <NA>       C\n 9:    14    <NA>       C\n10:    15    <NA>       H\n```\n:::\n\n```{.r .cell-code}\n# right join\ndt2[dt1, on = \"id\"]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n       id letter2 letter1\n    <int>  <char>  <char>\n 1:     1    <NA>       J\n 2:     2    <NA>       J\n 3:     3    <NA>       C\n 4:     4    <NA>       H\n 5:     5    <NA>       B\n 6:     6       H       H\n 7:     7       J       I\n 8:     8       G       G\n 9:     9       G       E\n10:    10       A       G\n```\n:::\n:::\n",
    "supporting": [
      "tema7_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}