# Lista de paquetes que queremos asegurarnos que estén instalados
packages <- c("data.table", "magrittr", "dplyr", "ggplot2")
# Función para instalar paquetes si no están ya instalados
install_if_missing <- function(package) {
if (!require(package, character.only = TRUE)) {
install.packages(package)
library(package, character.only = TRUE)
}
}
# Revisa cada paquete y lo instala si es necesario
sapply(packages, install_if_missing)
getwd()
# Lista de paquetes que queremos asegurarnos que estén instalados
packages <- c("data.table", "magrittr", "dplyr", "ggplot2")
# Función para instalar paquetes si no están ya instalados
install_if_missing <- function(package) {
if (!require(package, character.only = TRUE)) {
install.packages(package)
library(package, character.only = TRUE)
}
}
# Revisa cada paquete y lo instala si es necesario
sapply(packages, install_if_missing)
getwd()
library(data.table)
library(dplyr)
library(ggplot2)
DT = data.table(
ID = c("b","b","b","a","a","c"),
a = 1:6,
b = 7:12,
c = 13:18
)
DT
# Para comparar como se ve un df vs DT
as.data.frame(DT)
DT
data  <- fread("data/universal_top_spotify_songs.csv.gz")
head(data)
?fwrite
# ¿qué le falta al comando para que escriba el archivo comprimido?
fwrite(DT, "data/testDT.csv.gz", sep = ",", compress = "auto")
data[1:2,]
data[1:2]
data_MX <- data[country == "MX",]
data_MX
dim(data_MX)
data_MX_viejos <- data[country == "MX" & album_release_date <= 2000,]
data_MX_viejos <- data[country == "MX" & album_release_date <= 2000,]
data_MX_viejos
data_MX_viejos <- data[country == "MX" & album_release_date <= 2000,]
# Ordenar filas por bailabilidad
ordered_data_MX = data_MX[order(danceability, decreasing = T)]
ordered_data_MX
data_MX[order(-danceability)]
data_GB <- data[country == "GB",]
data_GB
ordered_data_GB = data_GB[order(daily_rank, decreasing = F)]
ordered_data_GB
unique(ordered_data_GB$name) |> head(n = 50)
ordered_data_GB
ordered_data_GB$album_release_date
min(ordered_data_GB$album_release_date)
min(ordered_data_GB$album_release_date, na.rm = T)
max(ordered_data_GB$album_release_date, na.rm = T)
data[,c(2,3,7),]
data[,name]
data[,name] %>% class
data[,list(artists,name,album_name)]
data[,.(artists,name,album_name)]
data[,spotify_id:weekly_movement]
variables <- c("artists","name","album_name")
data[ , ..variables]
colnames(data)
variables <- c("duration_ms","danceability","energy")
data[,..variables]
variables <- c("duration_ms","danceability","energy")
data[,..variables]
sept_caracter <-  data[snapshot_date == grepl("2024-09-.*"),..caracteristicas]
sept_caracter <-  data[format(snapshot_date, "%Y-m") == "2024-09",..caracteristicas]
sept_caracter <-  data[format(snapshot_date, "%Y-m") == "2024-09",..variables]
sept_caracter
sept_caracter <-  data[format(snapshot_date, "%Y-%m") == "2024-09",..variables]
sept_caracter
data[, .(artista = artists, song_name = name)]
### Contar el número de coincidencias
data[country == "MX" & acousticness > 0.5, length(spotify_id)]
data[country == "MX" & acousticness > 0.5, .N]
data[format(album_release_date, "%Y") < "2000" & daily_rank< 50, .N]
data[format(album_release_date, "%Y") < "2000" & daily_rank< 50, .N]
data[, duration_ms/1000/60]
data[, duration_ms/1000/60]  %>% mean()
data[,mean(duration_ms/1000/60)]
data[country == "MX", mean(popularity)]
colnames(data)
#### Modificar la tabla que está guardada en memoria con el operador :=
data[, date_dif := snapshot_date - album_release_date]
colnames(data)
data
data[, year := as.numeric(format(album_release_date, "%Y"))]
data
data[, c("diff_until_top50","duracion_minutos") := .(snapshot_date - album_release_date, duration_ms/1000/60)]
data
### Contar el numero de registro agrupando por cancion
data[,.N,by = name]
### Multiples factores por los cuales agrupar
times_song_per_album_per_country <- data[,.N,by = .(album_name,name,country)]
times_song_per_album_per_country
data = fread("data/universal_top_spotify_songs.csv.gz")
library(data.table)
library(magrittr)
library(ggplot2)
data = fread("data/universal_top_spotify_songs.csv.gz")
?melt
?dcast
colnames(data)
data[,.(.N), by = .(name,country,snapshot_date)]
data_long <- data[,.(.N), by = .(name,country,snapshot_date)]
freq_song_long <- data[,.(.N), by = .(name,country,snapshot_date)]
freq_song_wide <- dcast(freq_song_long, snapshot_date+name~country, value.var = "N")
freq_song_wide
freq_song_long <- data[,.(.N), by = .(name,country,format(snapshot_date,"%Y-%m"))]
freq_song_wide <- dcast(freq_song_long, snapshot_date+name~country, value.var = "N")
data
freq_song_long <- data[,.(.N), by = .(name,country,format(snapshot_date,"%Y-%m"))]
freq_song_long
freq_song_long <- data[,.(.N), by = .(name,country,month_yr = format(snapshot_date,"%Y-%m"))]
freq_song_long
freq_song_wide <- dcast(freq_song_long, snapshot_date+name~country, value.var = "N")
freq_song_wide <- dcast(freq_song_long, month_yr+name~country, value.var = "N")
freq_song_wide
