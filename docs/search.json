[
  {
    "objectID": "tema2.html",
    "href": "tema2.html",
    "title": "Importar y exportar datos",
    "section": "",
    "text": "Un objeto data.table se puede definir, por ejemplo:\n\nlibrary(data.table)\n\nDT = data.table(\n  ID = c(\"b\",\"b\",\"b\",\"a\",\"a\",\"c\"),\n  a = 1:6,\n  b = 7:12,\n  c = 13:18\n)\n\nDT\n\n       ID     a     b     c\n   &lt;char&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt;\n1:      b     1     7    13\n2:      b     2     8    14\n3:      b     3     9    15\n4:      a     4    10    16\n5:      a     5    11    17\n6:      c     6    12    18\n\n\n\n\n\n\n\n\n\nReto\n\n\n\n\n\nImaginemos que queremos crear una simulación de una base de datos de 10,000 secuencias aleatorias. La tabla que queremos va a tener dos columnas, la primera es un número identificador y la segunda una secuencia aleatoria de 100 pb de longitud. Por ejemplo, la siguiente tabla muestra las primeras 10 filas del resultado esperado.\n\n\n\n\n\n\n\n\n\nRespuesta\n\n\n\n\n\n\n\nCode\nsecuencias &lt;- data.table(\n                id = seq(1,10000), \n                sequencia = sapply(seq(1, 10000), function(x) paste(sample(c(\"A\", \"T\", \"C\", \"G\"), 100, replace = TRUE), collapse = \"\")))\n\nhead(secuencias)\n\n\n      id                                                                                            sequencia\n   &lt;int&gt;                                                                                               &lt;char&gt;\n1:     1 GTATGACATGCCCGCCAGATAGTCTGCAATTTTCCCATTCTGGTCTTTACTACCACTCAGCATCCCAACATCTGTATATCTCCGCGGCCCCTTCAGAGGA\n2:     2 CACCTCAATGCCATGGTTGCGGGATGAGCGGATATTTTTAGTCAACTCAGGTTTCAGCCAAACCAGATGAAGGCGAGAATCGTGGCAGAGCGTTGGCGTG\n3:     3 GCAATCGCGACATAACGAGGCGCGATTGACCGCCTCATTTCACAAAGAGAATGGGATTGACATTGTCAAACCGGCCTATCTCCGGCATTACCAGGCGGCG\n4:     4 AAAATCCTTGATCGGCGGCTTGCAATTGTAGCACCACCAGGAGTTCCCCTCGCAAAGAAATACTTCAGCTGTAGCTGAGGTGTCTCGGCCCGAGAGGGGG\n5:     5 CCTGTATACGACTATCACTCGTAAAGTACGCCGCACGACTTTCTTTATCGACCTAAGGTTACGTCATTGGCGCTTGTTAGCAGTGGGTAGTTTAAGCAGT\n6:     6 ATGGCAACCAAGGCCCCCGCTCTCCGGGTGATTCTGAGGTGAACTGGACTAACTTTTCACACTCGCGATAGACAGAGTCGAATTTGCGGTGCAAGCCTCC"
  },
  {
    "objectID": "tema2.html#crear-un-objeto-data.table",
    "href": "tema2.html#crear-un-objeto-data.table",
    "title": "Importar y exportar datos",
    "section": "",
    "text": "Un objeto data.table se puede definir, por ejemplo:\n\nlibrary(data.table)\n\nDT = data.table(\n  ID = c(\"b\",\"b\",\"b\",\"a\",\"a\",\"c\"),\n  a = 1:6,\n  b = 7:12,\n  c = 13:18\n)\n\nDT\n\n       ID     a     b     c\n   &lt;char&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt;\n1:      b     1     7    13\n2:      b     2     8    14\n3:      b     3     9    15\n4:      a     4    10    16\n5:      a     5    11    17\n6:      c     6    12    18\n\n\n\n\n\n\n\n\n\nReto\n\n\n\n\n\nImaginemos que queremos crear una simulación de una base de datos de 10,000 secuencias aleatorias. La tabla que queremos va a tener dos columnas, la primera es un número identificador y la segunda una secuencia aleatoria de 100 pb de longitud. Por ejemplo, la siguiente tabla muestra las primeras 10 filas del resultado esperado.\n\n\n\n\n\n\n\n\n\nRespuesta\n\n\n\n\n\n\n\nCode\nsecuencias &lt;- data.table(\n                id = seq(1,10000), \n                sequencia = sapply(seq(1, 10000), function(x) paste(sample(c(\"A\", \"T\", \"C\", \"G\"), 100, replace = TRUE), collapse = \"\")))\n\nhead(secuencias)\n\n\n      id                                                                                            sequencia\n   &lt;int&gt;                                                                                               &lt;char&gt;\n1:     1 GTATGACATGCCCGCCAGATAGTCTGCAATTTTCCCATTCTGGTCTTTACTACCACTCAGCATCCCAACATCTGTATATCTCCGCGGCCCCTTCAGAGGA\n2:     2 CACCTCAATGCCATGGTTGCGGGATGAGCGGATATTTTTAGTCAACTCAGGTTTCAGCCAAACCAGATGAAGGCGAGAATCGTGGCAGAGCGTTGGCGTG\n3:     3 GCAATCGCGACATAACGAGGCGCGATTGACCGCCTCATTTCACAAAGAGAATGGGATTGACATTGTCAAACCGGCCTATCTCCGGCATTACCAGGCGGCG\n4:     4 AAAATCCTTGATCGGCGGCTTGCAATTGTAGCACCACCAGGAGTTCCCCTCGCAAAGAAATACTTCAGCTGTAGCTGAGGTGTCTCGGCCCGAGAGGGGG\n5:     5 CCTGTATACGACTATCACTCGTAAAGTACGCCGCACGACTTTCTTTATCGACCTAAGGTTACGTCATTGGCGCTTGTTAGCAGTGGGTAGTTTAAGCAGT\n6:     6 ATGGCAACCAAGGCCCCCGCTCTCCGGGTGATTCTGAGGTGAACTGGACTAACTTTTCACACTCGCGATAGACAGAGTCGAATTTGCGGTGCAAGCCTCC"
  },
  {
    "objectID": "tema2.html#importar-y-exportar-datos-de-archivos",
    "href": "tema2.html#importar-y-exportar-datos-de-archivos",
    "title": "Importar y exportar datos",
    "section": "Importar y exportar datos de archivos",
    "text": "Importar y exportar datos de archivos\nLas funciones para importar y exportar son: fread y fwrite\nTienen las siguientes opciones principales, por ejemplo:\n\nfile: ruta del archivo.\nsep: el delimitador entre columnas.\n\nNota: La función tiene muchos argumentos que pueden ayudarte a personalizar el proceso de cargar datos en R.\nfread(input, file, text, cmd, sep=\"auto\", sep2=\"auto\", dec=\".\", quote=\"\\\"\",\n     nrows=Inf, header=\"auto\",\n     na.strings=getOption(\"datatable.na.strings\",\"NA\"),  # due to change to \"\"; see NEWS\n     stringsAsFactors=FALSE, verbose=getOption(\"datatable.verbose\", FALSE),\n     skip=\"__auto__\", select=NULL, drop=NULL, colClasses=NULL,\n     integer64=getOption(\"datatable.integer64\", \"integer64\"),\n     col.names,\n     check.names=FALSE, encoding=\"unknown\",\n     strip.white=TRUE, fill=FALSE, blank.lines.skip=FALSE,\n     key=NULL, index=NULL,\n     showProgress=getOption(\"datatable.showProgress\", interactive()),\n     data.table=getOption(\"datatable.fread.datatable\", TRUE),\n     nThread=getDTthreads(verbose),\n     logical01=getOption(\"datatable.logical01\", FALSE),  # due to change to TRUE; see NEWS\n     keepLeadingZeros = getOption(\"datatable.keepLeadingZeros\", FALSE),\n     yaml=FALSE, autostart=NA, tmpdir=tempdir(), tz=\"UTC\"\n     )\n     \nfwrite(x, file = \"\", append = FALSE, quote = \"auto\",\n  sep=getOption(\"datatable.fwrite.sep\", \",\"),\n  sep2 = c(\"\",\"|\",\"\"),\n  eol = if (.Platform$OS.type==\"windows\") \"\\r\\n\" else \"\\n\",\n  na = \"\", dec = \".\", row.names = FALSE, col.names = TRUE,\n  qmethod = c(\"double\",\"escape\"),\n  logical01 = getOption(\"datatable.logical01\", FALSE),  # due to change to TRUE; see NEWS\n  logicalAsInt = logical01,  # deprecated\n  scipen = getOption('scipen', 0L),\n  dateTimeAs = c(\"ISO\",\"squash\",\"epoch\",\"write.csv\"),\n  buffMB = 8L, nThread = getDTthreads(verbose),\n  showProgress = getOption(\"datatable.showProgress\", interactive()),\n  compress = c(\"auto\", \"none\", \"gzip\"),\n  yaml = FALSE,\n  bom = FALSE,\n  verbose = getOption(\"datatable.verbose\", FALSE),\n  encoding = \"\")\n\nConjunto de datos\nMuchos de los ejemplos de este curso los haremos utilizando la tabla de las 50 mejores canciones para 73 paises de acuerdo a Spotify. La tabla la pueden descargar en kaggle y se actualiza todos los días. La tabla que yo utilicé para este curso fue descargada el 8 de septiembre 2024. La tabla:\n\nTiene 25 columnas y 1,179,453 registros de canciones\nTiene registros desde el 2023-10-18 al 2024-09-08\nPesa 279 MB.\n\nNota: En caso de que no quieran descargar la lista actualizada aquí está el link de google drive del archivo que yo utilicé.\nNota: fread() también permite leer archivos comprimidos .gz\nlibrary(data.table)\n\ndata = fread(\"data/universal_top_spotify_songs.csv\", quote=\"\")\n\nhead(data) |&gt; knitr::kable()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nspotify_id\nname\nartists\ndaily_rank\ndaily_movement\nweekly_movement\ncountry\nsnapshot_date\npopularity\nis_explicit\nduration_ms\nalbum_name\nalbum_release_date\ndanceability\nenergy\nkey\nloudness\nmode\nspeechiness\nacousticness\ninstrumentalness\nliveness\nvalence\ntempo\ntime_signature\n\n\n\n\n2plbrEY59IikOBgBGLjaoe\nDie With A Smile\nLady Gaga, Bruno Mars\n1\n0\n0\n\n2024-09-08\n97\nFALSE\n251667\nDie With A Smile\n2024-08-16\n0.521\n0.592\n6\n-7.777\n0\n0.0304\n0.30800\n0.00e+00\n0.1220\n0.535\n157.969\n3\n\n\n6dOtVTDdiauQNBQEDOtlAB\nBIRDS OF A FEATHER\nBillie Eilish\n2\n0\n0\n\n2024-09-08\n100\nFALSE\n210373\nHIT ME HARD AND SOFT\n2024-05-17\n0.747\n0.507\n2\n-10.171\n1\n0.0358\n0.20000\n6.08e-02\n0.1170\n0.438\n104.978\n4\n\n\n5G2f63n7IPVPPjfNIGih7Q\nTaste\nSabrina Carpenter\n3\n0\n0\n\n2024-09-08\n94\nFALSE\n157279\nShort n’ Sweet\n2024-08-23\n0.674\n0.907\n3\n-4.086\n1\n0.0640\n0.10100\n0.00e+00\n0.2970\n0.721\n112.964\n4\n\n\n2HRqTpkrJO5ggZyyK6NPWz\nEspresso\nSabrina Carpenter\n4\n46\n46\n\n2024-09-08\n83\nTRUE\n175459\nShort n’ Sweet\n2024-08-23\n0.699\n0.776\n0\n-5.282\n1\n0.0293\n0.13100\n5.40e-06\n0.2050\n0.708\n103.963\n4\n\n\n7tI8dRuH2Yc6RuoTjxo4dU\nWho\nJimin\n5\n0\n0\n\n2024-09-08\n94\nFALSE\n170887\nMUSE\n2024-07-19\n0.660\n0.756\n0\n-3.743\n0\n0.0320\n0.00289\n0.00e+00\n0.1930\n0.838\n116.034\n4\n\n\n6WatFBLVB0x077xWeoVc2k\nSi Antes Te Hubiera Conocido\nKAROL G\n6\n2\n1\n\n2024-09-08\n96\nFALSE\n195824\nSi Antes Te Hubiera Conocido\n2024-06-21\n0.924\n0.668\n11\n-6.795\n1\n0.0469\n0.44600\n5.94e-04\n0.0678\n0.787\n128.027\n4\n\n\n\n\n\n\n\n\n\n\n\n\nReto\n\n\n\n\n\nUtiliza el código anterior para cargar la tabla de canciones en tu computadora.\nNota: Si quieres experimentar con tablas más grandes en la página de Kaggle hay muchas opciones. Por ejemplo: Spotify Charts que contiene las publicaciones de Top 200 y Top 50 globales desde 1 de enero 2017 (pesa 3.5 GB) y tiene 9 columnas."
  },
  {
    "objectID": "tema2.html#exportar",
    "href": "tema2.html#exportar",
    "title": "Importar y exportar datos",
    "section": "Exportar",
    "text": "Exportar\ndata.table también tiene una función optimizada para escribir los datos con los que estamos trabajando en forma de archivo. Los argumentos básicos son:\n\nx = objeto que se quiere exportar como archivo\nfile = nombre del archivo\nsep = caracter que se quiere utilizar como delimitador de campo\ncompress = debido a que podríamos estar trabajando con tablas de datos muy grandes podemos escribir los archivos comprimidos. Se puede especificar “gzip” o “auto” y utilizar la extension .gz en el nombre del archivo para escribir un archivo comprimido, la opción “none” nos permite escribir archivos sin comprimir.\n\nEjemplo: podemos escribir la tabla DT que creamos al principio de la sección:\nfwrite(DT, \"data/testDT.csv\", sep = \",\")\n\n\n\n\n\n\n\nEjercicio\n\n\n\n\n\nExporta la tabla de canciones como un archivo comprimido.\n\n\n\n\n\n\n\n\n\nRespuesta\n\n\n\n\n\nfwrite(data, \"data/universal_top_spotify_songs.csv.gz\", sep = \",\", compress = \"auto\")"
  },
  {
    "objectID": "tema2.html#velocidad-dplyr-vs-data.table",
    "href": "tema2.html#velocidad-dplyr-vs-data.table",
    "title": "Importar y exportar datos",
    "section": "Velocidad dplyr vs data.table",
    "text": "Velocidad dplyr vs data.table\nA continuación se muestra la comparación de un ejemplo de lectura de una tabla de 3062756 filas y 50 columnas utilizando la función de R base read.csv y fread.\n\nlibrary(rbenchmark)\n\ntest = benchmark(\"r base\" = {\n            read.csv(\"big_data/plantae_mexico_conCoords_specimen.csv\")\n          },\n          \"data.table\" = {\n            fread(\"big_data/plantae_mexico_conCoords_specimen.csv\")\n          },\n          replications = 10,\n          columns = c(\"test\", \"replications\", \"elapsed\",\n                      \"relative\", \"user.self\", \"sys.self\"))\n\n\n\n\n\nX\ntest\nreplications\nelapsed\nrelative\nuser.self\nsys.self\n\n\n\n\n2\ndata.table\n10\n110.933\n1.000\n206.818\n3.027\n\n\n1\nr base\n10\n380.665\n3.431\n376.605\n4.057\n\n\n\n\n\n\n\n\n\n\n\nReto\n\n\n\n\n\nSi quieres, puedes revisar el tiempo que te toma cargar la tabla de canciones de spotify utilizando read.csv y fread. Utiliza el comando de benchmark de la paquetería rbenchmark para contar el tiempo."
  },
  {
    "objectID": "tema2.html#data.frame---data.table",
    "href": "tema2.html#data.frame---data.table",
    "title": "Importar y exportar datos",
    "section": "data.frame - data.table",
    "text": "data.frame - data.table\nEl objeto de data.table es un objeto basado en un data.frame, por lo tanto es compatible con las funciones de R base que trabajan con data.frame.\nstr(data)\nClasses ‘data.table’ and 'data.frame':  1179453 obs. of  25 variables:\n $ spotify_id        : chr  \"2plbrEY59IikOBgBGLjaoe\" \"6dOtVTDdiauQNBQEDOtlAB\" \"5G2f63n7IPVPPjfNIGih7Q\" \"2HRqTpkrJO5ggZyyK6NPWz\" ...\n $ name              : chr  \"Die With A Smile\" \"BIRDS OF A FEATHER\" \"Taste\" \"Espresso\" ...\n $ artists           : chr  \"Lady Gaga, Bruno Mars\" \"Billie Eilish\" \"Sabrina Carpenter\" \"Sabrina Carpenter\" ...\n $ daily_rank        : int  1 2 3 4 5 6 7 8 9 10 ...\n $ daily_movement    : int  0 0 0 46 0 2 43 1 -2 1 ...\n $ weekly_movement   : int  0 0 0 46 0 1 43 0 41 -1 ...\n $ country           : chr  \"\" \"\" \"\" \"\" ...\n $ snapshot_date     : IDate, format: \"2024-09-08\" \"2024-09-08\" ...\n $ popularity        : int  97 100 94 83 94 96 84 97 77 91 ...\n $ is_explicit       : logi  FALSE FALSE FALSE TRUE FALSE FALSE ...\n $ duration_ms       : int  251667 210373 157279 175459 170887 195824 186365 218423 190427 180304 ...\n $ album_name        : chr  \"Die With A Smile\" \"HIT ME HARD AND SOFT\" \"Short n' Sweet\" \"Short n' Sweet\" ...\n $ album_release_date: IDate, format: \"2024-08-16\" \"2024-05-17\" ...\n $ danceability      : num  0.521 0.747 0.674 0.699 0.66 0.924 0.675 0.7 0.466 0.472 ...\n $ energy            : num  0.592 0.507 0.907 0.776 0.756 0.668 0.586 0.582 0.872 0.471 ...\n $ key               : int  6 2 3 0 0 11 9 11 7 10 ...\n $ loudness          : num  -7.78 -10.17 -4.09 -5.28 -3.74 ...\n $ mode              : int  0 1 1 1 0 1 1 0 1 1 ...\n $ speechiness       : num  0.0304 0.0358 0.064 0.0293 0.032 0.0469 0.0531 0.0356 0.0336 0.0603 ...\n $ acousticness      : num  0.308 0.2 0.101 0.131 0.00289 0.446 0.257 0.0502 0.0156 0.151 ...\n $ instrumentalness  : num  0.00 6.08e-02 0.00 5.36e-06 0.00 5.94e-04 0.00 0.00 0.00 0.00 ...\n $ liveness          : num  0.122 0.117 0.297 0.205 0.193 0.0678 0.104 0.0881 0.121 0.14 ...\n $ valence           : num  0.535 0.438 0.721 0.708 0.838 0.787 0.621 0.785 0.806 0.219 ...\n $ tempo             : num  158 105 113 104 116 ...\n $ time_signature    : int  3 4 4 4 4 4 4 4 4 3 ...\n - attr(*, \".internal.selfref\")=&lt;externalptr&gt; \n\nSin embargo, los objetos se pueden cambiar de clase utilizando as.data.frame y setDF para convertir a data frame o as.data.table y setDT para convertir a data.table. Por ejemplo:\n\nlibrary(magrittr)\n\n# Recuerda que DT es el objeto data.table que definimos al principio de la lección\n\nas.data.frame(DT) %&gt;% class()\n\n[1] \"data.frame\"\n\nas.data.frame(DT) %&gt;% as.data.table() %&gt;% class()\n\n[1] \"data.table\" \"data.frame\"\n\nas.data.frame(DT) %&gt;% setDT(DT) %&gt;% class()\n\n[1] \"data.table\" \"data.frame\"\n\n\nLa diferencia entre las funciones set y las funciones as. es que la primera modifica directamente la tabla de referencia guardada en la memoria (no genera una copia) mientras que la segunda genera una nueva copia del objeto."
  },
  {
    "objectID": "tema7.html",
    "href": "tema7.html",
    "title": "Uniones entre tablas",
    "section": "",
    "text": "Hay dos formas de escribir uniones entre tablas usando data.table. La primera es mediante la función merge() de r base. Los argumentos básicos de esta función son:\nmerge(x, y, by = intersect(names(x), names(y)),\n      by.x = by, by.y = by, all = FALSE, all.x = all, all.y = all,\n      sort = TRUE, suffixes = c(\".x\",\".y\"), no.dups = TRUE,\n      incomparables = NULL, ...)\n\nx, y = son los objetos data.table que se quieren unir\nby, by.x, by.y = nombres de las columnas que funcionan como índice para hacer la unión. Cuando ambas tablas tienen el mismo nombre de columna se utiliza by, cuando no, se puede especificar el nombre en x (by.x) y el nombre en y (by.y)\nall, all.x, all.y = especifican el tipo de unión. all = T es para hacer full join (mantiene todas las filas de ambas tablas), all.x = T es para hacer left join (mantiene todas las filas de la tabla x), all.y es para hacer right join (mantiene todas las filas de y), all = F es para hacer inner join (solo mantiene las filas que están en ambas tablas)\n\nlibrary(data.table)\n\ndt1 = data.table(id = seq(1,10), letter1 = LETTERS[sample(1:10, replace = T)])\n\ndt2 = data.table(id = seq(6,15), letter2 = LETTERS[sample(1:10, replace = T)])\n\ndt1\n\n       id letter1\n    &lt;int&gt;  &lt;char&gt;\n 1:     1       I\n 2:     2       I\n 3:     3       I\n 4:     4       E\n 5:     5       D\n 6:     6       J\n 7:     7       A\n 8:     8       A\n 9:     9       C\n10:    10       C\n\ndt2\n\n       id letter2\n    &lt;int&gt;  &lt;char&gt;\n 1:     6       G\n 2:     7       E\n 3:     8       J\n 4:     9       H\n 5:    10       H\n 6:    11       F\n 7:    12       H\n 8:    13       C\n 9:    14       H\n10:    15       I\n\n# inner join\nmerge(dt1,dt2,by = \"id\")\n\nKey: &lt;id&gt;\n      id letter1 letter2\n   &lt;int&gt;  &lt;char&gt;  &lt;char&gt;\n1:     6       J       G\n2:     7       A       E\n3:     8       A       J\n4:     9       C       H\n5:    10       C       H\n\n# left join\nmerge(dt1,dt2,by = \"id\", all.x = T)\n\nKey: &lt;id&gt;\n       id letter1 letter2\n    &lt;int&gt;  &lt;char&gt;  &lt;char&gt;\n 1:     1       I    &lt;NA&gt;\n 2:     2       I    &lt;NA&gt;\n 3:     3       I    &lt;NA&gt;\n 4:     4       E    &lt;NA&gt;\n 5:     5       D    &lt;NA&gt;\n 6:     6       J       G\n 7:     7       A       E\n 8:     8       A       J\n 9:     9       C       H\n10:    10       C       H\n\n# right join\nmerge(dt1,dt2,by = \"id\", all.y = T)\n\nKey: &lt;id&gt;\n       id letter1 letter2\n    &lt;int&gt;  &lt;char&gt;  &lt;char&gt;\n 1:     6       J       G\n 2:     7       A       E\n 3:     8       A       J\n 4:     9       C       H\n 5:    10       C       H\n 6:    11    &lt;NA&gt;       F\n 7:    12    &lt;NA&gt;       H\n 8:    13    &lt;NA&gt;       C\n 9:    14    &lt;NA&gt;       H\n10:    15    &lt;NA&gt;       I\n\n# full join\nmerge(dt1,dt2,by = \"id\", all = T)\n\nKey: &lt;id&gt;\n       id letter1 letter2\n    &lt;int&gt;  &lt;char&gt;  &lt;char&gt;\n 1:     1       I    &lt;NA&gt;\n 2:     2       I    &lt;NA&gt;\n 3:     3       I    &lt;NA&gt;\n 4:     4       E    &lt;NA&gt;\n 5:     5       D    &lt;NA&gt;\n 6:     6       J       G\n 7:     7       A       E\n 8:     8       A       J\n 9:     9       C       H\n10:    10       C       H\n11:    11    &lt;NA&gt;       F\n12:    12    &lt;NA&gt;       H\n13:    13    &lt;NA&gt;       C\n14:    14    &lt;NA&gt;       H\n15:    15    &lt;NA&gt;       I"
  },
  {
    "objectID": "tema7.html#función-merge",
    "href": "tema7.html#función-merge",
    "title": "Uniones entre tablas",
    "section": "",
    "text": "Hay dos formas de escribir uniones entre tablas usando data.table. La primera es mediante la función merge() de r base. Los argumentos básicos de esta función son:\nmerge(x, y, by = intersect(names(x), names(y)),\n      by.x = by, by.y = by, all = FALSE, all.x = all, all.y = all,\n      sort = TRUE, suffixes = c(\".x\",\".y\"), no.dups = TRUE,\n      incomparables = NULL, ...)\n\nx, y = son los objetos data.table que se quieren unir\nby, by.x, by.y = nombres de las columnas que funcionan como índice para hacer la unión. Cuando ambas tablas tienen el mismo nombre de columna se utiliza by, cuando no, se puede especificar el nombre en x (by.x) y el nombre en y (by.y)\nall, all.x, all.y = especifican el tipo de unión. all = T es para hacer full join (mantiene todas las filas de ambas tablas), all.x = T es para hacer left join (mantiene todas las filas de la tabla x), all.y es para hacer right join (mantiene todas las filas de y), all = F es para hacer inner join (solo mantiene las filas que están en ambas tablas)\n\nlibrary(data.table)\n\ndt1 = data.table(id = seq(1,10), letter1 = LETTERS[sample(1:10, replace = T)])\n\ndt2 = data.table(id = seq(6,15), letter2 = LETTERS[sample(1:10, replace = T)])\n\ndt1\n\n       id letter1\n    &lt;int&gt;  &lt;char&gt;\n 1:     1       I\n 2:     2       I\n 3:     3       I\n 4:     4       E\n 5:     5       D\n 6:     6       J\n 7:     7       A\n 8:     8       A\n 9:     9       C\n10:    10       C\n\ndt2\n\n       id letter2\n    &lt;int&gt;  &lt;char&gt;\n 1:     6       G\n 2:     7       E\n 3:     8       J\n 4:     9       H\n 5:    10       H\n 6:    11       F\n 7:    12       H\n 8:    13       C\n 9:    14       H\n10:    15       I\n\n# inner join\nmerge(dt1,dt2,by = \"id\")\n\nKey: &lt;id&gt;\n      id letter1 letter2\n   &lt;int&gt;  &lt;char&gt;  &lt;char&gt;\n1:     6       J       G\n2:     7       A       E\n3:     8       A       J\n4:     9       C       H\n5:    10       C       H\n\n# left join\nmerge(dt1,dt2,by = \"id\", all.x = T)\n\nKey: &lt;id&gt;\n       id letter1 letter2\n    &lt;int&gt;  &lt;char&gt;  &lt;char&gt;\n 1:     1       I    &lt;NA&gt;\n 2:     2       I    &lt;NA&gt;\n 3:     3       I    &lt;NA&gt;\n 4:     4       E    &lt;NA&gt;\n 5:     5       D    &lt;NA&gt;\n 6:     6       J       G\n 7:     7       A       E\n 8:     8       A       J\n 9:     9       C       H\n10:    10       C       H\n\n# right join\nmerge(dt1,dt2,by = \"id\", all.y = T)\n\nKey: &lt;id&gt;\n       id letter1 letter2\n    &lt;int&gt;  &lt;char&gt;  &lt;char&gt;\n 1:     6       J       G\n 2:     7       A       E\n 3:     8       A       J\n 4:     9       C       H\n 5:    10       C       H\n 6:    11    &lt;NA&gt;       F\n 7:    12    &lt;NA&gt;       H\n 8:    13    &lt;NA&gt;       C\n 9:    14    &lt;NA&gt;       H\n10:    15    &lt;NA&gt;       I\n\n# full join\nmerge(dt1,dt2,by = \"id\", all = T)\n\nKey: &lt;id&gt;\n       id letter1 letter2\n    &lt;int&gt;  &lt;char&gt;  &lt;char&gt;\n 1:     1       I    &lt;NA&gt;\n 2:     2       I    &lt;NA&gt;\n 3:     3       I    &lt;NA&gt;\n 4:     4       E    &lt;NA&gt;\n 5:     5       D    &lt;NA&gt;\n 6:     6       J       G\n 7:     7       A       E\n 8:     8       A       J\n 9:     9       C       H\n10:    10       C       H\n11:    11    &lt;NA&gt;       F\n12:    12    &lt;NA&gt;       H\n13:    13    &lt;NA&gt;       C\n14:    14    &lt;NA&gt;       H\n15:    15    &lt;NA&gt;       I"
  },
  {
    "objectID": "tema7.html#sintaxis-de-data.table",
    "href": "tema7.html#sintaxis-de-data.table",
    "title": "Uniones entre tablas",
    "section": "Sintaxis de data.table",
    "text": "Sintaxis de data.table\nLa segunda forma de hacer uniones entre tablas es usando la sintaxis de data.table.\nDT1[DT2, nomatch = 0]\nSi lo traducimos a la sintaxis de la función anterior entonces la tabla que está por fuera es x, la tabla que está por dentro es y y el argumento nomatch te permite indicar qué hacer con las claves para las que no encuentra coincidencia en ambas tablas. Cuando nomatch = 0 no incluye las claves que no se comparten entre tablas.\n\n# inner join\ndt1[dt2, on = \"id\", nomatch=0]\n\n      id letter1 letter2\n   &lt;int&gt;  &lt;char&gt;  &lt;char&gt;\n1:     6       J       G\n2:     7       A       E\n3:     8       A       J\n4:     9       C       H\n5:    10       C       H\n\n# left join\ndt1[dt2, on = \"id\"]\n\n       id letter1 letter2\n    &lt;int&gt;  &lt;char&gt;  &lt;char&gt;\n 1:     6       J       G\n 2:     7       A       E\n 3:     8       A       J\n 4:     9       C       H\n 5:    10       C       H\n 6:    11    &lt;NA&gt;       F\n 7:    12    &lt;NA&gt;       H\n 8:    13    &lt;NA&gt;       C\n 9:    14    &lt;NA&gt;       H\n10:    15    &lt;NA&gt;       I\n\n# right join\ndt2[dt1, on = \"id\"]\n\n       id letter2 letter1\n    &lt;int&gt;  &lt;char&gt;  &lt;char&gt;\n 1:     1    &lt;NA&gt;       I\n 2:     2    &lt;NA&gt;       I\n 3:     3    &lt;NA&gt;       I\n 4:     4    &lt;NA&gt;       E\n 5:     5    &lt;NA&gt;       D\n 6:     6       G       J\n 7:     7       E       A\n 8:     8       J       A\n 9:     9       H       C\n10:    10       H       C"
  },
  {
    "objectID": "tema7.html#ejercicio",
    "href": "tema7.html#ejercicio",
    "title": "Uniones entre tablas",
    "section": "Ejercicio",
    "text": "Ejercicio\nQueremos averiguar cuántos registros y de cuántas especies de algún género de plantas hay de cada categoría de conservación (IUCN) para México.\nCon lo aprendido en los temas anteriores podemos generar un subconjunto de la tabla de registros que solo tenga los registros de un género (por ejemplo para el género Quercus).\nPaso 1. Filtra la tabla de registros de plantas para México para quedarte con la información de algún género que te guste.\nAdemás, encontramos que utilizando el paquete rredlist podemos buscar el estatus de conservación de la IUCN para algunas especies que nos interesen con la función rl_search.\nEl siguiente código muestra una forma para obtener el estatus de conservación. Lo que hace es buscar los resultados en la base de datos de la lista roja para cada especie en el subconjunto de registros de encinos de la tabla de registros de plantas para México.\n\nlibrary(\"rredlist\")\nlibrary(\"magrittr\")\n\ndata = fread(\"data/data_quercus.csv\")\n\ntoken = \"9bb4facb6d23f48efbf424bb05c0c1ef1cf6f468393bc745d42179ac4aca5fee\"\n\nsp_list = unique(data$species)\nsp_list = sp_list[which(sp_list != \"\")] # quitar elementos vacios\n\nred_list = list()\n\nfor (i in sp_list) {\n        red_list[[i]] &lt;- rl_search(i, key = token)$result\n}\n\n# seleccionar columnas útiles\niucn_data = do.call(rbind,red_list) %&gt;% select(scientific_name, category, population_trend)\n\nwrite.csv(iucn_data, \"data/iucn_data.csv\", row.names = F)\n\nPaso 2: Utiliza el código anterior para generar la tabla de estados de conservación para las especies del género que elegiste.\nPaso 3: Une la tabla de los registros del genero que escogiste con la de estados de conservación\nPaso 4: Haz un resumen del número de registros y el número de especies que hay para cada estado de conservación. Por ejemplo, para los encinos los resultados son los siguientes:\n\n\n\n\n\ncategory\nnumero_registros\nnumero_sp\n\n\n\n\nEN\n996\n19\n\n\nLC\n41064\n96\n\n\nNT\n3214\n18\n\n\nVU\n1876\n9\n\n\nDD\n762\n21\n\n\nCR\n8\n1\n\n\n\n\n\n\n\n\n\n\n\nRespuesta\n\n\n\n\n\n#| echo: false\n\ndata = fread(\"data/data_quercus.csv\")\n\ndataIUCN = fread(\"data/iucn_data.csv\")\nsetnames(dataIUCN, \"scientific_name\", \"species\") # renombrar la columna de scientific_name a species porque es la clave que ambas tablas tienen en comun\n\n# Hacer un left join para añadir la información de la iucn a la tabla de datos\njoin = data[dataIUCN, on = \"species\"]\n\n# Hacer el resumen, primero contando los registros agrupando por especie y por categoría. Después, utilizando una cadena y solo agrupamos por categoría, la suma de las filas dentro de un grupo sería el número de registros que pertenecen a la categoría y el número de filas de cada grupo corresponde al número de especies en la categoría.\n\njoin[,.N,by=.(species,category)][,.(numero_registros = sum(N),numero_sp = .N),by = category]"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "tema1.html",
    "href": "tema1.html",
    "title": "Sintaxis básica",
    "section": "",
    "text": "data.table es un objeto de R que está pensado para mantener las operaciones en uno o pocos comandos. La lógica de la sintaxis básica es la siguiente:"
  },
  {
    "objectID": "tema1.html#cheatsheet",
    "href": "tema1.html#cheatsheet",
    "title": "Sintaxis básica",
    "section": "Cheatsheet",
    "text": "Cheatsheet"
  },
  {
    "objectID": "tema4.html",
    "href": "tema4.html",
    "title": "Modificación de columnas",
    "section": "",
    "text": "data.table nos permite efectuar operaciones sobre las columnas, por ejemplo, contar cuántas coincidencias tenemos para nuestros criterios aplicados.\n\ndata[country == \"MX\" & acousticness &gt; 0.5, length(spotify_id)]\n\n[1] 2395\n\ndata[country == \"MX\" & acousticness &gt; 0.5, .N]\n\n[1] 2395\n\n\nExisten símbolos especiales como .N que nos cuenta el número de observaciones que cumplen nuestros criterios para el número de grupos que hemos definido. En este caso todas las observaciones pertenecen al mismo grupo.\n\n\n\n\n\n\nEjercicio\n\n\n\n\n\nPregunta: ¿Cuántas canciones que se hayan publicado de antes del 2000 han estado dentro del top 50? (Utiliza .N)\n\n\n\n\n\n\n\n\n\nRespuesta\n\n\n\n\n\n\ndata[album_release_date&lt;2000,.N]\n\n[1] 6430\n\n\n\n\n\nPor ejemplo si quisieramos saber el promedio de duración en minutos de las canciones\n\ndata[, duration_ms/1000/60] %&gt;% mean()\n\n[1] 3.207851\n\ndata[,mean(duration_ms/1000/60)]\n\n[1] 3.207851\n\n\nAdemás podemos combinar filtros sobre las filas y acciones sobre las columnas. Por ejemplo, si queremos calcular el promedio de popularidad de las canciones en el top 50 de México. Primero hacemos un filtro de las canciones populares en México y después obtenemos el promedio de popularidad únicamente de estas filas.\n\n\nNota: La popularidad de una canción es un valor entre 0 y 100, donde 100 indica la mayor popularidad. La popularidad se calcula mediante un algoritmo y se basa, en su mayoría, en el número total de reproducciones que ha tenido la canción y en cuán recientes han sido esas reproducciones. En términos generales, las canciones que se reproducen mucho actualmente tendrán una popularidad mayor que las canciones que se reprodujeron mucho en el pasado. Las canciones duplicadas (por ejemplo, la misma canción de un sencillo y de un álbum) se califican de manera independiente. La popularidad de los artistas y los álbumes se deriva matemáticamente de la popularidad de las canciones. Nota: el valor de popularidad puede no reflejar la popularidad real en algunos días, ya que no se actualiza en tiempo real.\n\n\n\ndata[country == \"MX\", mean(popularity)]\n\n[1] 84.38275\n\n\nDebido a que tanto el filtro como la función sobre la columna están en el mismo comando, data.table sabe el total de las operaciones y puede hacer más eficiente la velocidad y el uso de la memoria cuando las ejecuta.\n\n\n\n\n\n\nEjercicio\n\n\n\n\n\nCalcula el promedio y desviación estandar en los movimientos diarios de ranking (el cambio en las clasificaciones en comparación con el día anterior) en las canciones populares de México.\n\n\n\n\n\n\n\n\n\nRespuesta\n\n\n\n\n\n\n\nCode\ndata[country == \"MX\",\n        c(mean(daily_movement), sd(daily_movement))]\n\n\n[1] 0.4105561 4.9231557"
  },
  {
    "objectID": "tema4.html#agregar-nuevas-columnas-a-nuestro-data.table",
    "href": "tema4.html#agregar-nuevas-columnas-a-nuestro-data.table",
    "title": "Modificación de columnas",
    "section": "Agregar nuevas columnas a nuestro data.table",
    "text": "Agregar nuevas columnas a nuestro data.table\nHasta ahora estabamos aplicando funciones y obtuvimos vectores o números como resultado pero podemos utilizar el espacio j para crear nuevas columnas en nuestras tablas. Por ejemplo, podemos guardar la duración de cada canción en minutos.\n\n data[, .(duration_min = duration_ms/1000/60)]\n\n         duration_min\n                &lt;num&gt;\n      1:     4.194450\n      2:     3.506217\n      3:     2.621317\n      4:     2.924317\n      5:     2.848117\n     ---             \n1179449:     5.174833\n1179450:     2.887550\n1179451:     3.079850\n1179452:     2.992667\n1179453:     2.205983\n\n\nAhora qué sucede si queremos generar la nueva columna dentro de nuestra tabla original. Por ejemplo si estimamos la diferencia en tiempo desde que el album fue publicado y la fecha en la que apareció entre el top 50\nNota: El operador := sirve para modificar tablas guardadas en la memoria directamente (modify in place)\n\ndata[, date_dif := snapshot_date - album_release_date]\n\ndata\n\nIndex: &lt;country&gt;\n                     spotify_id                              name                     artists daily_rank daily_movement\n                         &lt;char&gt;                            &lt;char&gt;                      &lt;char&gt;      &lt;int&gt;          &lt;int&gt;\n      1: 2plbrEY59IikOBgBGLjaoe                  Die With A Smile       Lady Gaga, Bruno Mars          1              0\n      2: 6dOtVTDdiauQNBQEDOtlAB                BIRDS OF A FEATHER               Billie Eilish          2              0\n      3: 5G2f63n7IPVPPjfNIGih7Q                             Taste           Sabrina Carpenter          3              0\n      4: 2HRqTpkrJO5ggZyyK6NPWz                          Espresso           Sabrina Carpenter          4             46\n      5: 7tI8dRuH2Yc6RuoTjxo4dU                               Who                       Jimin          5              0\n     ---                                                                                                               \n1179449: 0AYt6NMyyLd0rLuvr0UkMH         Slime You Out (feat. SZA)                  Drake, SZA         46              4\n1179450: 2Gk6fi0dqt91NKvlzGsmm7 SAY MY GRACE (feat. Travis Scott)        Offset, Travis Scott         47              3\n1179451: 26b3oVLrRUaaybJulow9kz                            People                    Libianca         48              2\n1179452: 5ydjxBSUIDn26MFzU3asP4                        Rainy Days                           V         49              1\n1179453: 59NraMJsLaMCVtwXTSia8i                             Prada cassö, RAYE, D-Block Europe         50              0\n         weekly_movement country snapshot_date popularity is_explicit duration_ms           album_name\n                   &lt;int&gt;  &lt;char&gt;        &lt;IDat&gt;      &lt;int&gt;      &lt;lgcl&gt;       &lt;int&gt;               &lt;char&gt;\n      1:               0            2024-09-08         97       FALSE      251667     Die With A Smile\n      2:               0            2024-09-08        100       FALSE      210373 HIT ME HARD AND SOFT\n      3:               0            2024-09-08         94       FALSE      157279       Short n' Sweet\n      4:              46            2024-09-08         83        TRUE      175459       Short n' Sweet\n      5:               0            2024-09-08         94       FALSE      170887                 MUSE\n     ---                                                                                              \n1179449:               0      AE    2023-10-18         84        TRUE      310490     For All The Dogs\n1179450:               0      AE    2023-10-18         80        TRUE      173253           SET IT OFF\n1179451:               0      AE    2023-10-18         88       FALSE      184791               People\n1179452:               0      AE    2023-10-18         88       FALSE      179560              Layover\n1179453:               0      AE    2023-10-18         94        TRUE      132359                Prada\n         album_release_date danceability energy   key loudness  mode speechiness acousticness instrumentalness liveness\n                     &lt;IDat&gt;        &lt;num&gt;  &lt;num&gt; &lt;int&gt;    &lt;num&gt; &lt;int&gt;       &lt;num&gt;        &lt;num&gt;            &lt;num&gt;    &lt;num&gt;\n      1:         2024-08-16        0.521  0.592     6   -7.777     0      0.0304      0.30800         0.00e+00    0.122\n      2:         2024-05-17        0.747  0.507     2  -10.171     1      0.0358      0.20000         6.08e-02    0.117\n      3:         2024-08-23        0.674  0.907     3   -4.086     1      0.0640      0.10100         0.00e+00    0.297\n      4:         2024-08-23        0.699  0.776     0   -5.282     1      0.0293      0.13100         5.36e-06    0.205\n      5:         2024-07-19        0.660  0.756     0   -3.743     0      0.0320      0.00289         0.00e+00    0.193\n     ---                                                                                                               \n1179449:         2023-10-06        0.483  0.408     5   -9.243     0      0.0502      0.50800         0.00e+00    0.259\n1179450:         2023-10-13        0.773  0.635    10   -5.060     1      0.0452      0.05850         0.00e+00    0.132\n1179451:         2022-12-06        0.573  0.422    10   -7.621     0      0.0678      0.55100         1.31e-05    0.102\n1179452:         2023-08-11        0.633  0.454     9   -8.016     0      0.0875      0.73900         0.00e+00    0.148\n1179453:         2023-08-11        0.638  0.717     8   -5.804     1      0.0375      0.00100         1.79e-06    0.113\n         valence   tempo time_signature date_dif\n           &lt;num&gt;   &lt;num&gt;          &lt;int&gt;    &lt;int&gt;\n      1:   0.535 157.969              3       23\n      2:   0.438 104.978              4      114\n      3:   0.721 112.964              4       16\n      4:   0.708 103.963              4       16\n      5:   0.838 116.034              4       51\n     ---                                        \n1179449:   0.105  88.880              3       12\n1179450:   0.476 121.879              4        5\n1179451:   0.693 124.357              5      316\n1179452:   0.282  74.828              4       68\n1179453:   0.422 141.904              4       68\n\n\nPara agregar múltiples columnas en la tabla original se utiliza la siguientes sintaxis\ndt[,`:=`(col1 = funcion, col2 = funcion)]\n\ndt[, c(\"col1\",\"col2\",\"col3\") := list(val1,val2,val3)]\n\n\n\n\n\n\nEjercicio\n\n\n\n\n\n\nAgrega una nueva columna (year_release) a la tabla original que solo muestre el año de publicación del album de la canción\nEn un solo comando: genera una columna de diferencia entre la fecha de publicación y la fecha en la que la canción apareció en el top50. Además generar una columna de duración de la canción en minutos\n\n\n\n\n\n\n\n\n\n\nRespuesta\n\n\n\n\n\n\nEjercicio 1\n\n\nCode\n# Ejercicio 1\ndata[, year_release := format(album_release_date, \"%Y\")]\n\ncolnames(data)\n\n\n [1] \"spotify_id\"         \"name\"               \"artists\"            \"daily_rank\"         \"daily_movement\"    \n [6] \"weekly_movement\"    \"country\"            \"snapshot_date\"      \"popularity\"         \"is_explicit\"       \n[11] \"duration_ms\"        \"album_name\"         \"album_release_date\" \"danceability\"       \"energy\"            \n[16] \"key\"                \"loudness\"           \"mode\"               \"speechiness\"        \"acousticness\"      \n[21] \"instrumentalness\"   \"liveness\"           \"valence\"            \"tempo\"              \"time_signature\"    \n[26] \"date_dif\"           \"year_release\"      \n\n\nCode\nhead(data[,.(year_release)])\n\n\n   year_release\n         &lt;char&gt;\n1:         2024\n2:         2024\n3:         2024\n4:         2024\n5:         2024\n6:         2024\n\n\n\n\nEjercicio 2\n\n\nCode\n# Ejercicio 2\n\ndata[, c(\"days_until_top50\",\"duration_min\") := .(snapshot_date-album_release_date, duration_ms/1000/60)]\n\ncolnames(data)\n\n\n [1] \"spotify_id\"         \"name\"               \"artists\"            \"daily_rank\"         \"daily_movement\"    \n [6] \"weekly_movement\"    \"country\"            \"snapshot_date\"      \"popularity\"         \"is_explicit\"       \n[11] \"duration_ms\"        \"album_name\"         \"album_release_date\" \"danceability\"       \"energy\"            \n[16] \"key\"                \"loudness\"           \"mode\"               \"speechiness\"        \"acousticness\"      \n[21] \"instrumentalness\"   \"liveness\"           \"valence\"            \"tempo\"              \"time_signature\"    \n[26] \"date_dif\"           \"year_release\"       \"days_until_top50\"   \"duration_min\"      \n\n\nCode\ndata[,.(days_until_top50,duration_min)]\n\n\n         days_until_top50 duration_min\n                    &lt;int&gt;        &lt;num&gt;\n      1:               23     4.194450\n      2:              114     3.506217\n      3:               16     2.621317\n      4:               16     2.924317\n      5:               51     2.848117\n     ---                              \n1179449:               12     5.174833\n1179450:                5     2.887550\n1179451:              316     3.079850\n1179452:               68     2.992667\n1179453:               68     2.205983"
  },
  {
    "objectID": "tema4.html#agregar-nuevas-columnas-a-nuestro-data.table-original",
    "href": "tema4.html#agregar-nuevas-columnas-a-nuestro-data.table-original",
    "title": "Modificación de columnas",
    "section": "Agregar nuevas columnas a nuestro data.table original",
    "text": "Agregar nuevas columnas a nuestro data.table original\nAhora qué sucede si queremos generar una nueva columna dentro de nuestra tabla original. Por ejemplo si estimamos la diferencia en tiempo desde que el album fue publicado y la fecha en la que apareció entre el top 50\n\ndata[, date_dif := snapshot_date - album_release_date]\n\ndata\n\nIndex: &lt;country&gt;\n                     spotify_id                              name                     artists daily_rank daily_movement\n                         &lt;char&gt;                            &lt;char&gt;                      &lt;char&gt;      &lt;int&gt;          &lt;int&gt;\n      1: 2plbrEY59IikOBgBGLjaoe                  Die With A Smile       Lady Gaga, Bruno Mars          1              0\n      2: 6dOtVTDdiauQNBQEDOtlAB                BIRDS OF A FEATHER               Billie Eilish          2              0\n      3: 5G2f63n7IPVPPjfNIGih7Q                             Taste           Sabrina Carpenter          3              0\n      4: 2HRqTpkrJO5ggZyyK6NPWz                          Espresso           Sabrina Carpenter          4             46\n      5: 7tI8dRuH2Yc6RuoTjxo4dU                               Who                       Jimin          5              0\n     ---                                                                                                               \n1179449: 0AYt6NMyyLd0rLuvr0UkMH         Slime You Out (feat. SZA)                  Drake, SZA         46              4\n1179450: 2Gk6fi0dqt91NKvlzGsmm7 SAY MY GRACE (feat. Travis Scott)        Offset, Travis Scott         47              3\n1179451: 26b3oVLrRUaaybJulow9kz                            People                    Libianca         48              2\n1179452: 5ydjxBSUIDn26MFzU3asP4                        Rainy Days                           V         49              1\n1179453: 59NraMJsLaMCVtwXTSia8i                             Prada cassö, RAYE, D-Block Europe         50              0\n         weekly_movement country snapshot_date popularity is_explicit duration_ms           album_name\n                   &lt;int&gt;  &lt;char&gt;        &lt;IDat&gt;      &lt;int&gt;      &lt;lgcl&gt;       &lt;int&gt;               &lt;char&gt;\n      1:               0            2024-09-08         97       FALSE      251667     Die With A Smile\n      2:               0            2024-09-08        100       FALSE      210373 HIT ME HARD AND SOFT\n      3:               0            2024-09-08         94       FALSE      157279       Short n' Sweet\n      4:              46            2024-09-08         83        TRUE      175459       Short n' Sweet\n      5:               0            2024-09-08         94       FALSE      170887                 MUSE\n     ---                                                                                              \n1179449:               0      AE    2023-10-18         84        TRUE      310490     For All The Dogs\n1179450:               0      AE    2023-10-18         80        TRUE      173253           SET IT OFF\n1179451:               0      AE    2023-10-18         88       FALSE      184791               People\n1179452:               0      AE    2023-10-18         88       FALSE      179560              Layover\n1179453:               0      AE    2023-10-18         94        TRUE      132359                Prada\n         album_release_date danceability energy   key loudness  mode speechiness acousticness instrumentalness liveness\n                     &lt;IDat&gt;        &lt;num&gt;  &lt;num&gt; &lt;int&gt;    &lt;num&gt; &lt;int&gt;       &lt;num&gt;        &lt;num&gt;            &lt;num&gt;    &lt;num&gt;\n      1:         2024-08-16        0.521  0.592     6   -7.777     0      0.0304      0.30800         0.00e+00    0.122\n      2:         2024-05-17        0.747  0.507     2  -10.171     1      0.0358      0.20000         6.08e-02    0.117\n      3:         2024-08-23        0.674  0.907     3   -4.086     1      0.0640      0.10100         0.00e+00    0.297\n      4:         2024-08-23        0.699  0.776     0   -5.282     1      0.0293      0.13100         5.36e-06    0.205\n      5:         2024-07-19        0.660  0.756     0   -3.743     0      0.0320      0.00289         0.00e+00    0.193\n     ---                                                                                                               \n1179449:         2023-10-06        0.483  0.408     5   -9.243     0      0.0502      0.50800         0.00e+00    0.259\n1179450:         2023-10-13        0.773  0.635    10   -5.060     1      0.0452      0.05850         0.00e+00    0.132\n1179451:         2022-12-06        0.573  0.422    10   -7.621     0      0.0678      0.55100         1.31e-05    0.102\n1179452:         2023-08-11        0.633  0.454     9   -8.016     0      0.0875      0.73900         0.00e+00    0.148\n1179453:         2023-08-11        0.638  0.717     8   -5.804     1      0.0375      0.00100         1.79e-06    0.113\n         valence   tempo time_signature date_dif\n           &lt;num&gt;   &lt;num&gt;          &lt;int&gt;    &lt;int&gt;\n      1:   0.535 157.969              3       23\n      2:   0.438 104.978              4      114\n      3:   0.721 112.964              4       16\n      4:   0.708 103.963              4       16\n      5:   0.838 116.034              4       51\n     ---                                        \n1179449:   0.105  88.880              3       12\n1179450:   0.476 121.879              4        5\n1179451:   0.693 124.357              5      316\n1179452:   0.282  74.828              4       68\n1179453:   0.422 141.904              4       68\n\n\nPara agregar múltiples columnas en la tabla original se utiliza la siguiente sintaxis\ndt[,`:=`(col1 = funcion, col2 = funcion)]\n\n\n\n\n\n\nEjercicio\n\n\n\n\n\nAgrega una nueva columna (year) a la tabla original que solo muestre el año de publicación del album de la canción\n\n\n\n\n\n\n\n\n\nRespuesta\n\n\n\n\n\n\ndata[, `:=`(year_release = format(album_release_date, \"%Y\"), snapshot_month = format(snapshot_date, \"%Y-%m\"))]"
  },
  {
    "objectID": "tema5.html",
    "href": "tema5.html",
    "title": "Agrupación y cadenas de operaciones",
    "section": "",
    "text": "Ahora continuaremos usando el dataset de las plantas para sacar datos considerando agrupaciones. Por ejemplo podemos estimar cuántas veces aparece una canción entre las top 50.\ndata[,.N,by = name]\n\n                            name     N\n                          &lt;char&gt; &lt;int&gt;\n    1:          Die With A Smile  1145\n    2:        BIRDS OF A FEATHER  5515\n    3:                     Taste   674\n    4:                  Espresso  6972\n    5:                       Who  1965\n   ---                                \n13332:                     Tsiou     2\n13333:              Mexri Telous     2\n13334:           Virtuální drogy     2\n13335: AMBIENTE ERRADO - Ao Vivo     2\n13336:     Oficializar - Ao Vivo     2\nSe pueden usar múltiples factores en las agrupaciones. Por ejemplo, cuantas veces aparece una canción de su album particular por pais.\ntimes_song_per_album_per_country &lt;- data[,.N,by = .(album_name,name,country)]"
  },
  {
    "objectID": "tema5.html#ejercicios",
    "href": "tema5.html#ejercicios",
    "title": "Agrupación",
    "section": "Ejercicios:",
    "text": "Ejercicios:\nEres un analista de datos en una plataforma de streaming musical. Tu jefe te ha pedido que identifiques los álbumes más escuchados en 73 paises y que analices cómo ha cambiado su popularidad promedio mes a mes.\n\n\n\n\n\n\nRespuesta\n\n\n\n\n\n\ndata[, snapshot_month := format(snapshot_date, \"%Y-%m\")]\n\nmost_popular_5 &lt;- data[,.N,by = album_name][order(-N),][1:5,]$album_name\n\ndata[album_name %in% most_popular_5,.(mean_month_rank = mean(daily_rank)), by = .(album_name,snapshot_month)] %&gt;% \n  ggplot(aes(x = snapshot_month, y = mean_month_rank,color = album_name, group = album_name))+\n  geom_line()+\n  geom_point()+\n  labs(color = \"Top5 albumes\", y = \"Ranking promedio mensual\", x = \"Mes\")+\n  scale_y_reverse(limits = c(50,1))+\n  theme_bw()"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Introducción y recursos",
    "section": "",
    "text": "Es un paquete que extiende y hace más eficiente el data.frame de R base. De acuerdo con los creadores del paquete:\n\nLas operaciones de manipulación de datos como subconjunto, grupo, actualización, unión, etc., están inherentemente relacionadas. Mantener estas operaciones juntas permite:\n\n\n\nuna sintaxis concisa y consistente independientemente del conjunto de operaciones que desees realizar para lograr tu objetivo final.\nrealizar análisis de manera fluida sin la carga cognitiva de tener que mapear cada operación a una función particular de un conjunto potencialmente enorme de funciones disponibles antes de realizar el análisis.\noptimizar automáticamente las operaciones internamente y de manera muy efectiva, al saber precisamente los datos requeridos para cada operación, lo que lleva a un código muy rápido y eficiente en términos de memoria.\n\n\n\nEn resumen, si estás interesado en reducir enormemente el tiempo de programación y computación, entonces este paquete es para ti.\n\n\n(Vigneta de introducción a data.table)"
  },
  {
    "objectID": "index.html#qué-es-qué-ventajas-tiene",
    "href": "index.html#qué-es-qué-ventajas-tiene",
    "title": "Introducción y recursos",
    "section": "",
    "text": "Es un paquete que extiende y hace más eficiente el data.frame de R base. De acuerdo con los creadores del paquete:\n\nLas operaciones de manipulación de datos como subconjunto, grupo, actualización, unión, etc., están inherentemente relacionadas. Mantener estas operaciones juntas permite:\n\n\n\nuna sintaxis concisa y consistente independientemente del conjunto de operaciones que desees realizar para lograr tu objetivo final.\nrealizar análisis de manera fluida sin la carga cognitiva de tener que mapear cada operación a una función particular de un conjunto potencialmente enorme de funciones disponibles antes de realizar el análisis.\noptimizar automáticamente las operaciones internamente y de manera muy efectiva, al saber precisamente los datos requeridos para cada operación, lo que lleva a un código muy rápido y eficiente en términos de memoria.\n\n\n\nEn resumen, si estás interesado en reducir enormemente el tiempo de programación y computación, entonces este paquete es para ti.\n\n\n(Vigneta de introducción a data.table)"
  },
  {
    "objectID": "index.html#comparaciones-con-otros-paquetes",
    "href": "index.html#comparaciones-con-otros-paquetes",
    "title": "Introducción y recursos",
    "section": "Comparaciones con otros paquetes",
    "text": "Comparaciones con otros paquetes\nBenchmarks"
  },
  {
    "objectID": "index.html#instalación",
    "href": "index.html#instalación",
    "title": "Introducción y recursos",
    "section": "Instalación",
    "text": "Instalación\n\ninstall.packages(\"data.table\")"
  },
  {
    "objectID": "index.html#recursos",
    "href": "index.html#recursos",
    "title": "Introducción y recursos",
    "section": "Recursos",
    "text": "Recursos\n\nComunidad\n\nStackOverflow data.table\nWiki\nVignettes\nTutorial recomendado"
  },
  {
    "objectID": "tema3.html",
    "href": "tema3.html",
    "title": "Filtros y selección de columnas",
    "section": "",
    "text": "Similar a como se seleccionan filas en un data.frame, en un objeto data.table se pueden seleccionar filas utilizando rangos de índices. En los siguientes dos ejemplos se muestra como seleccionar las primeras dos filas de la tabla de registros.\nlibrary(data.table)\n\n\ndata = fread(\"data/universal_top_spotify_songs.csv\")\n\ndata[1:2,] \n\n               spotify_id               name               artists daily_rank daily_movement weekly_movement country\n                   &lt;char&gt;             &lt;char&gt;                &lt;char&gt;      &lt;int&gt;          &lt;int&gt;           &lt;int&gt;  &lt;char&gt;\n1: 2plbrEY59IikOBgBGLjaoe   Die With A Smile Lady Gaga, Bruno Mars          1              0               0        \n2: 6dOtVTDdiauQNBQEDOtlAB BIRDS OF A FEATHER         Billie Eilish          2              0               0        \n   snapshot_date popularity is_explicit duration_ms           album_name album_release_date danceability energy   key\n          &lt;IDat&gt;      &lt;int&gt;      &lt;lgcl&gt;       &lt;int&gt;               &lt;char&gt;             &lt;IDat&gt;        &lt;num&gt;  &lt;num&gt; &lt;int&gt;\n1:    2024-09-08         97       FALSE      251667     Die With A Smile         2024-08-16        0.521  0.592     6\n2:    2024-09-08        100       FALSE      210373 HIT ME HARD AND SOFT         2024-05-17        0.747  0.507     2\n   loudness  mode speechiness acousticness instrumentalness liveness valence   tempo time_signature\n      &lt;num&gt; &lt;int&gt;       &lt;num&gt;        &lt;num&gt;            &lt;num&gt;    &lt;num&gt;   &lt;num&gt;   &lt;num&gt;          &lt;int&gt;\n1:   -7.777     0      0.0304        0.308           0.0000    0.122   0.535 157.969              3\n2:  -10.171     1      0.0358        0.200           0.0608    0.117   0.438 104.978              4\n\n\n\nNota: Cuando solo estamos seleccionando filas no es necesario incluir la coma al final.\n\ndata[1:2] \n\n               spotify_id               name               artists daily_rank daily_movement weekly_movement country\n                   &lt;char&gt;             &lt;char&gt;                &lt;char&gt;      &lt;int&gt;          &lt;int&gt;           &lt;int&gt;  &lt;char&gt;\n1: 2plbrEY59IikOBgBGLjaoe   Die With A Smile Lady Gaga, Bruno Mars          1              0               0        \n2: 6dOtVTDdiauQNBQEDOtlAB BIRDS OF A FEATHER         Billie Eilish          2              0               0        \n   snapshot_date popularity is_explicit duration_ms           album_name album_release_date danceability energy   key\n          &lt;IDat&gt;      &lt;int&gt;      &lt;lgcl&gt;       &lt;int&gt;               &lt;char&gt;             &lt;IDat&gt;        &lt;num&gt;  &lt;num&gt; &lt;int&gt;\n1:    2024-09-08         97       FALSE      251667     Die With A Smile         2024-08-16        0.521  0.592     6\n2:    2024-09-08        100       FALSE      210373 HIT ME HARD AND SOFT         2024-05-17        0.747  0.507     2\n   loudness  mode speechiness acousticness instrumentalness liveness valence   tempo time_signature\n      &lt;num&gt; &lt;int&gt;       &lt;num&gt;        &lt;num&gt;            &lt;num&gt;    &lt;num&gt;   &lt;num&gt;   &lt;num&gt;          &lt;int&gt;\n1:   -7.777     0      0.0304        0.308           0.0000    0.122   0.535 157.969              3\n2:  -10.171     1      0.0358        0.200           0.0608    0.117   0.438 104.978              4\n\n\n\n\n\n\nDe acuerdo con la sintaxis del paquete, el espacio i es el lugar en el que se pueden realizar operaciones sobre las filas como los filtros. Por ejemplo, utilizando la tabla de canciones podríamos estar interesados en solo seleccionar aquellos registros que pertenezcan a México.\ndata_MX &lt;- data[country == \"MX\",] \n\ndim(data_MX)\n\n\n[1] 16256    25\n\n\nO podríamos estar interesadas en seleccionar solo los registros más viejos, los que fueron publicados antes del 2000.\ndata_MX_viejos &lt;- data[country == \"MX\" & album_release_date &lt;= 2000,]\n\ndim(data_MX_viejos)\n\n\n[1]  2 25\n\n\nOperadores lógicos para hacer los filtros:\n\n\n\nOperador\nComparación\nEjemplo\nResultado\n\n\n\n\nx | y\nx Ó y es verdadero\nTRUE | FALSE\nTRUE\n\n\nx & y\nx Y y son verdaderos\nTRUE & FALSE\nFALSE\n\n\n!x\nx no es verdadero (negación)\n!TRUE\nFALSE\n\n\nisTRUE(x)\nx es verdadero (afirmación)\nisTRUE(TRUE)\nTRUE\n\n\n\n\n\n\n\nOtra función que se puede realizar en el espacio de las filas es ordenarlas. Por ejemplo, podríamos ordenar la tabla de canciones de México por qué tan bailable es.\n\n# Ordenar los datos de la tabla de registros de Quercus por estado en orden alfabetico\n\nordered_data_MX = data_MX[order(danceability, decreasing = T)]\n\n# seleccionar la columna de estado como vector y seleccionar los valores únicos\n# mostrar solo los primeros valores\n\nunique(ordered_data_MX$danceability) |&gt; head()\n\n[1] 0.937 0.924 0.922 0.920 0.918 0.913\n\n\n\n\n\n\n\n\nReto\n\n\n\n\n\n\nCarga el archivo de canciones utilizando la función fread que revisamos en el tema anterior\nUtiliza un filtro para quedarte con las filas que pertenezcan al pais que te interese\nOrdena de manera descendente por ranking\n\nPregunta:\n¿De qué rango de años son las 50 canciones más escuchadas\n\n\n\n\n\n\n\n\n\nRespuesta\n\n\n\n\n\n\n\nCode\ndata_MX_ordenado &lt;- data_MX[order(-daily_rank)] \n\nyears &lt;- unique(format(data_MX_ordenado$album_release_date,\"%Y\"))\n\nc(min(years),max(years))\n\n\n[1] \"1963\" \"2024\""
  },
  {
    "objectID": "tema3.html#seleccionar-por-índices",
    "href": "tema3.html#seleccionar-por-índices",
    "title": "Filtros y selección de columnas",
    "section": "",
    "text": "Similar a como se seleccionan filas en un data.frame, en un objeto data.table se pueden seleccionar filas utilizando rangos de índices. En los siguientes dos ejemplos se muestra como seleccionar las primeras dos filas de la tabla de registros.\nlibrary(data.table)\n\n\ndata = fread(\"data/universal_top_spotify_songs.csv\")\n\ndata[1:2,] \n\n               spotify_id               name               artists daily_rank daily_movement weekly_movement country\n                   &lt;char&gt;             &lt;char&gt;                &lt;char&gt;      &lt;int&gt;          &lt;int&gt;           &lt;int&gt;  &lt;char&gt;\n1: 2plbrEY59IikOBgBGLjaoe   Die With A Smile Lady Gaga, Bruno Mars          1              0               0        \n2: 6dOtVTDdiauQNBQEDOtlAB BIRDS OF A FEATHER         Billie Eilish          2              0               0        \n   snapshot_date popularity is_explicit duration_ms           album_name album_release_date danceability energy   key\n          &lt;IDat&gt;      &lt;int&gt;      &lt;lgcl&gt;       &lt;int&gt;               &lt;char&gt;             &lt;IDat&gt;        &lt;num&gt;  &lt;num&gt; &lt;int&gt;\n1:    2024-09-08         97       FALSE      251667     Die With A Smile         2024-08-16        0.521  0.592     6\n2:    2024-09-08        100       FALSE      210373 HIT ME HARD AND SOFT         2024-05-17        0.747  0.507     2\n   loudness  mode speechiness acousticness instrumentalness liveness valence   tempo time_signature\n      &lt;num&gt; &lt;int&gt;       &lt;num&gt;        &lt;num&gt;            &lt;num&gt;    &lt;num&gt;   &lt;num&gt;   &lt;num&gt;          &lt;int&gt;\n1:   -7.777     0      0.0304        0.308           0.0000    0.122   0.535 157.969              3\n2:  -10.171     1      0.0358        0.200           0.0608    0.117   0.438 104.978              4\n\n\n\nNota: Cuando solo estamos seleccionando filas no es necesario incluir la coma al final.\n\ndata[1:2] \n\n               spotify_id               name               artists daily_rank daily_movement weekly_movement country\n                   &lt;char&gt;             &lt;char&gt;                &lt;char&gt;      &lt;int&gt;          &lt;int&gt;           &lt;int&gt;  &lt;char&gt;\n1: 2plbrEY59IikOBgBGLjaoe   Die With A Smile Lady Gaga, Bruno Mars          1              0               0        \n2: 6dOtVTDdiauQNBQEDOtlAB BIRDS OF A FEATHER         Billie Eilish          2              0               0        \n   snapshot_date popularity is_explicit duration_ms           album_name album_release_date danceability energy   key\n          &lt;IDat&gt;      &lt;int&gt;      &lt;lgcl&gt;       &lt;int&gt;               &lt;char&gt;             &lt;IDat&gt;        &lt;num&gt;  &lt;num&gt; &lt;int&gt;\n1:    2024-09-08         97       FALSE      251667     Die With A Smile         2024-08-16        0.521  0.592     6\n2:    2024-09-08        100       FALSE      210373 HIT ME HARD AND SOFT         2024-05-17        0.747  0.507     2\n   loudness  mode speechiness acousticness instrumentalness liveness valence   tempo time_signature\n      &lt;num&gt; &lt;int&gt;       &lt;num&gt;        &lt;num&gt;            &lt;num&gt;    &lt;num&gt;   &lt;num&gt;   &lt;num&gt;          &lt;int&gt;\n1:   -7.777     0      0.0304        0.308           0.0000    0.122   0.535 157.969              3\n2:  -10.171     1      0.0358        0.200           0.0608    0.117   0.438 104.978              4"
  },
  {
    "objectID": "tema3.html#filtrar-filas",
    "href": "tema3.html#filtrar-filas",
    "title": "Filtros y selección de columnas",
    "section": "",
    "text": "De acuerdo con la sintaxis del paquete, el espacio i es el lugar en el que se pueden realizar operaciones sobre las filas como los filtros. Por ejemplo, utilizando la tabla de canciones podríamos estar interesados en solo seleccionar aquellos registros que pertenezcan a México.\ndata_MX &lt;- data[country == \"MX\",] \n\ndim(data_MX)\n\n\n[1] 16256    25\n\n\nO podríamos estar interesadas en seleccionar solo los registros más viejos, los que fueron publicados antes del 2000.\ndata_MX_viejos &lt;- data[country == \"MX\" & album_release_date &lt;= 2000,]\n\ndim(data_MX_viejos)\n\n\n[1]  2 25\n\n\nOperadores lógicos para hacer los filtros:\n\n\n\nOperador\nComparación\nEjemplo\nResultado\n\n\n\n\nx | y\nx Ó y es verdadero\nTRUE | FALSE\nTRUE\n\n\nx & y\nx Y y son verdaderos\nTRUE & FALSE\nFALSE\n\n\n!x\nx no es verdadero (negación)\n!TRUE\nFALSE\n\n\nisTRUE(x)\nx es verdadero (afirmación)\nisTRUE(TRUE)\nTRUE"
  },
  {
    "objectID": "tema3.html#ordenar-filas",
    "href": "tema3.html#ordenar-filas",
    "title": "Filtros y selección de columnas",
    "section": "",
    "text": "Otra función que se puede realizar en el espacio de las filas es ordenarlas. Por ejemplo, podríamos ordenar la tabla de canciones de México por qué tan bailable es.\n\n# Ordenar los datos de la tabla de registros de Quercus por estado en orden alfabetico\n\nordered_data_MX = data_MX[order(danceability, decreasing = T)]\n\n# seleccionar la columna de estado como vector y seleccionar los valores únicos\n# mostrar solo los primeros valores\n\nunique(ordered_data_MX$danceability) |&gt; head()\n\n[1] 0.937 0.924 0.922 0.920 0.918 0.913\n\n\n\n\n\n\n\n\nReto\n\n\n\n\n\n\nCarga el archivo de canciones utilizando la función fread que revisamos en el tema anterior\nUtiliza un filtro para quedarte con las filas que pertenezcan al pais que te interese\nOrdena de manera descendente por ranking\n\nPregunta:\n¿De qué rango de años son las 50 canciones más escuchadas\n\n\n\n\n\n\n\n\n\nRespuesta\n\n\n\n\n\n\n\nCode\ndata_MX_ordenado &lt;- data_MX[order(-daily_rank)] \n\nyears &lt;- unique(format(data_MX_ordenado$album_release_date,\"%Y\"))\n\nc(min(years),max(years))\n\n\n[1] \"1963\" \"2024\""
  },
  {
    "objectID": "tema3.html#seleccionar-columnas-por-índice",
    "href": "tema3.html#seleccionar-columnas-por-índice",
    "title": "Filtros y selección de columnas",
    "section": "Seleccionar columnas por índice",
    "text": "Seleccionar columnas por índice\nDe acuerdo con la sintaxis del paquete, el espacio j nos permite realizar operaciones sobre las columnas. Una de esas operaciones es la selección de columnas.\nSe pueden seleccionar por medio de índices:\n\ndata[,c(2,3,7),]\n\n                                      name                     artists country\n                                    &lt;char&gt;                      &lt;char&gt;  &lt;char&gt;\n      1:                  Die With A Smile       Lady Gaga, Bruno Mars        \n      2:                BIRDS OF A FEATHER               Billie Eilish        \n      3:                             Taste           Sabrina Carpenter        \n      4:                          Espresso           Sabrina Carpenter        \n      5:                               Who                       Jimin        \n     ---                                                                      \n1179449:         Slime You Out (feat. SZA)                  Drake, SZA      AE\n1179450: SAY MY GRACE (feat. Travis Scott)        Offset, Travis Scott      AE\n1179451:                            People                    Libianca      AE\n1179452:                        Rainy Days                           V      AE\n1179453:                             Prada cassö, RAYE, D-Block Europe      AE"
  },
  {
    "objectID": "tema3.html#seleccionar-columnas-por-nombre",
    "href": "tema3.html#seleccionar-columnas-por-nombre",
    "title": "Filtros y selección de columnas",
    "section": "Seleccionar columnas por nombre",
    "text": "Seleccionar columnas por nombre\nSe pueden seleccionar las columas por nombre y regresar como vector:\n\ndata[,name] |&gt; head()\n\n[1] \"Die With A Smile\"             \"BIRDS OF A FEATHER\"           \"Taste\"                       \n[4] \"Espresso\"                     \"Who\"                          \"Si Antes Te Hubiera Conocido\"\n\n\nSe pueden seleccionar las columnas usando una lista y regresar como tabla:\n\ndata[,list(artists,name,album_name)]\n\n                             artists                              name           album_name\n                              &lt;char&gt;                            &lt;char&gt;               &lt;char&gt;\n      1:       Lady Gaga, Bruno Mars                  Die With A Smile     Die With A Smile\n      2:               Billie Eilish                BIRDS OF A FEATHER HIT ME HARD AND SOFT\n      3:           Sabrina Carpenter                             Taste       Short n' Sweet\n      4:           Sabrina Carpenter                          Espresso       Short n' Sweet\n      5:                       Jimin                               Who                 MUSE\n     ---                                                                                   \n1179449:                  Drake, SZA         Slime You Out (feat. SZA)     For All The Dogs\n1179450:        Offset, Travis Scott SAY MY GRACE (feat. Travis Scott)           SET IT OFF\n1179451:                    Libianca                            People               People\n1179452:                           V                        Rainy Days              Layover\n1179453: cassö, RAYE, D-Block Europe                             Prada                Prada\n\n\nUn atajo para no escribir list() es .():\n\ndata[,.(artists,name,album_name)]\n\n                             artists                              name           album_name\n                              &lt;char&gt;                            &lt;char&gt;               &lt;char&gt;\n      1:       Lady Gaga, Bruno Mars                  Die With A Smile     Die With A Smile\n      2:               Billie Eilish                BIRDS OF A FEATHER HIT ME HARD AND SOFT\n      3:           Sabrina Carpenter                             Taste       Short n' Sweet\n      4:           Sabrina Carpenter                          Espresso       Short n' Sweet\n      5:                       Jimin                               Who                 MUSE\n     ---                                                                                   \n1179449:                  Drake, SZA         Slime You Out (feat. SZA)     For All The Dogs\n1179450:        Offset, Travis Scott SAY MY GRACE (feat. Travis Scott)           SET IT OFF\n1179451:                    Libianca                            People               People\n1179452:                           V                        Rainy Days              Layover\n1179453: cassö, RAYE, D-Block Europe                             Prada                Prada\n\n\nSeleccionar columnas por rangos usando nombres:\n\ndata[,spotify_id:weekly_movement]\n\n                     spotify_id                              name                     artists daily_rank daily_movement\n                         &lt;char&gt;                            &lt;char&gt;                      &lt;char&gt;      &lt;int&gt;          &lt;int&gt;\n      1: 2plbrEY59IikOBgBGLjaoe                  Die With A Smile       Lady Gaga, Bruno Mars          1              0\n      2: 6dOtVTDdiauQNBQEDOtlAB                BIRDS OF A FEATHER               Billie Eilish          2              0\n      3: 5G2f63n7IPVPPjfNIGih7Q                             Taste           Sabrina Carpenter          3              0\n      4: 2HRqTpkrJO5ggZyyK6NPWz                          Espresso           Sabrina Carpenter          4             46\n      5: 7tI8dRuH2Yc6RuoTjxo4dU                               Who                       Jimin          5              0\n     ---                                                                                                               \n1179449: 0AYt6NMyyLd0rLuvr0UkMH         Slime You Out (feat. SZA)                  Drake, SZA         46              4\n1179450: 2Gk6fi0dqt91NKvlzGsmm7 SAY MY GRACE (feat. Travis Scott)        Offset, Travis Scott         47              3\n1179451: 26b3oVLrRUaaybJulow9kz                            People                    Libianca         48              2\n1179452: 5ydjxBSUIDn26MFzU3asP4                        Rainy Days                           V         49              1\n1179453: 59NraMJsLaMCVtwXTSia8i                             Prada cassö, RAYE, D-Block Europe         50              0\n         weekly_movement\n                   &lt;int&gt;\n      1:               0\n      2:               0\n      3:               0\n      4:              46\n      5:               0\n     ---                \n1179449:               0\n1179450:               0\n1179451:               0\n1179452:               0\n1179453:               0\n\n\nPara seleccionar columnas guardadas en una variable se puede utilizar el prefijo ..:\n\nvariables &lt;- c(\"artists\",\"name\",\"album_name\")\n\ndata[ , ..variables]\n\n                             artists                              name           album_name\n                              &lt;char&gt;                            &lt;char&gt;               &lt;char&gt;\n      1:       Lady Gaga, Bruno Mars                  Die With A Smile     Die With A Smile\n      2:               Billie Eilish                BIRDS OF A FEATHER HIT ME HARD AND SOFT\n      3:           Sabrina Carpenter                             Taste       Short n' Sweet\n      4:           Sabrina Carpenter                          Espresso       Short n' Sweet\n      5:                       Jimin                               Who                 MUSE\n     ---                                                                                   \n1179449:                  Drake, SZA         Slime You Out (feat. SZA)     For All The Dogs\n1179450:        Offset, Travis Scott SAY MY GRACE (feat. Travis Scott)           SET IT OFF\n1179451:                    Libianca                            People               People\n1179452:                           V                        Rainy Days              Layover\n1179453: cassö, RAYE, D-Block Europe                             Prada                Prada\n\n\nNota: Tanto los objetos data.frame como los data.table son listas (aun cuando las vemos como tablas). El hecho de que las operaciones realizadas en el espacio j regresen listas es muy poderoso y permite hacer operaciones más complicadas más adelante.\n\n\n\n\n\n\nReto\n\n\n\n\n\nA. Me gustaría tener un data frame en donde solo tuviera la información de las características de las canciones (por ejemplo: duración, energía, etc.)\n\nEnlista los nombres de columnas y analiza de qué tratan\nGuarda los nombres de las columnas que solo contengan información acerca las características en un objeto\nSelecciona las columnas de la tabla data usando el objeto de nombres de columnas.\n\nB. Genera un objeto data.table que tenga los registros del mes de septiembre 2024 y las columnas que describen las características de las cancions (utiliza un solo comando).\n\n\n\n\n\n\n\n\n\nRespuesta\n\n\n\n\n\ninfo_canciones &lt;- c(“duration_ms”, “danceability”, “energy”, “loudness”, “speechiness”, “acousticness”,“instrumentalness”,“liveness”)\n\n\nCode\ninfo_canciones &lt;- c(\"duration_ms\", \"danceability\", \"energy\", \"loudness\", \"speechiness\", \"acousticness\",\"instrumentalness\",\"liveness\")\n\ndata[,..info_canciones,]\n\n\n         duration_ms danceability energy loudness speechiness acousticness instrumentalness liveness\n               &lt;int&gt;        &lt;num&gt;  &lt;num&gt;    &lt;num&gt;       &lt;num&gt;        &lt;num&gt;            &lt;num&gt;    &lt;num&gt;\n      1:      251667        0.521  0.592   -7.777      0.0304      0.30800         0.00e+00    0.122\n      2:      210373        0.747  0.507  -10.171      0.0358      0.20000         6.08e-02    0.117\n      3:      157279        0.674  0.907   -4.086      0.0640      0.10100         0.00e+00    0.297\n      4:      175459        0.699  0.776   -5.282      0.0293      0.13100         5.36e-06    0.205\n      5:      170887        0.660  0.756   -3.743      0.0320      0.00289         0.00e+00    0.193\n     ---                                                                                            \n1179449:      310490        0.483  0.408   -9.243      0.0502      0.50800         0.00e+00    0.259\n1179450:      173253        0.773  0.635   -5.060      0.0452      0.05850         0.00e+00    0.132\n1179451:      184791        0.573  0.422   -7.621      0.0678      0.55100         1.31e-05    0.102\n1179452:      179560        0.633  0.454   -8.016      0.0875      0.73900         0.00e+00    0.148\n1179453:      132359        0.638  0.717   -5.804      0.0375      0.00100         1.79e-06    0.113\n\n\nCode\ndata[format(snapshot_date, \"%Y-%m\") == \"2024-09\" , ..info_canciones]\n\n\n       duration_ms danceability energy loudness speechiness acousticness instrumentalness liveness\n             &lt;int&gt;        &lt;num&gt;  &lt;num&gt;    &lt;num&gt;       &lt;num&gt;        &lt;num&gt;            &lt;num&gt;    &lt;num&gt;\n    1:      251667        0.521  0.592   -7.777      0.0304      0.30800         0.00e+00   0.1220\n    2:      210373        0.747  0.507  -10.171      0.0358      0.20000         6.08e-02   0.1170\n    3:      157279        0.674  0.907   -4.086      0.0640      0.10100         0.00e+00   0.2970\n    4:      175459        0.699  0.776   -5.282      0.0293      0.13100         5.36e-06   0.2050\n    5:      170887        0.660  0.756   -3.743      0.0320      0.00289         0.00e+00   0.1930\n   ---                                                                                            \n29196:      140733        0.882  0.764   -5.241      0.2040      0.35900         0.00e+00   0.1190\n29197:      180000        0.840  0.715   -5.141      0.1870      0.17600         0.00e+00   0.0935\n29198:      241000        0.330  0.313  -10.906      0.0353      0.53600         5.70e-06   0.2770\n29199:      131872        0.749  0.729   -3.190      0.0321      0.26100         0.00e+00   0.1130\n29200:      151739        0.804  0.957   -5.452      0.0340      0.12500         1.74e-02   0.1140"
  },
  {
    "objectID": "tema3.html#deseleccionar-columas",
    "href": "tema3.html#deseleccionar-columas",
    "title": "Filtros y selección de columnas",
    "section": "Deseleccionar columas",
    "text": "Deseleccionar columas\nSimilar a las formas de seleccionar columnas podemos utilizar los operadores - y ! para evitar la selección de ciertas columnas o rangos de columnas.\n\ndata[,-c(\"name\",\"artists\")] %&gt;% colnames()\n\n [1] \"spotify_id\"         \"daily_rank\"         \"daily_movement\"     \"weekly_movement\"    \"country\"           \n [6] \"snapshot_date\"      \"popularity\"         \"is_explicit\"        \"duration_ms\"        \"album_name\"        \n[11] \"album_release_date\" \"danceability\"       \"energy\"             \"key\"                \"loudness\"          \n[16] \"mode\"               \"speechiness\"        \"acousticness\"       \"instrumentalness\"   \"liveness\"          \n[21] \"valence\"            \"tempo\"              \"time_signature\"    \n\ndata[,!c(\"spotify_id\")] %&gt;% colnames()\n\n [1] \"name\"               \"artists\"            \"daily_rank\"         \"daily_movement\"     \"weekly_movement\"   \n [6] \"country\"            \"snapshot_date\"      \"popularity\"         \"is_explicit\"        \"duration_ms\"       \n[11] \"album_name\"         \"album_release_date\" \"danceability\"       \"energy\"             \"key\"               \n[16] \"loudness\"           \"mode\"               \"speechiness\"        \"acousticness\"       \"instrumentalness\"  \n[21] \"liveness\"           \"valence\"            \"tempo\"              \"time_signature\"    \n\ndata[,!(key:time_signature)] %&gt;% colnames()\n\n [1] \"spotify_id\"         \"name\"               \"artists\"            \"daily_rank\"         \"daily_movement\"    \n [6] \"weekly_movement\"    \"country\"            \"snapshot_date\"      \"popularity\"         \"is_explicit\"       \n[11] \"duration_ms\"        \"album_name\"         \"album_release_date\" \"danceability\"       \"energy\""
  },
  {
    "objectID": "tema3.html#renombrar-columnas",
    "href": "tema3.html#renombrar-columnas",
    "title": "Filtros y selección de columnas",
    "section": "Renombrar columnas",
    "text": "Renombrar columnas\nEn el espacio de operaciones sobre las columnas también se pueden renombrar las columnas.\n\ndata[, .(artista = artists, song_name = name)]\n\n                             artista                         song_name\n                              &lt;char&gt;                            &lt;char&gt;\n      1:       Lady Gaga, Bruno Mars                  Die With A Smile\n      2:               Billie Eilish                BIRDS OF A FEATHER\n      3:           Sabrina Carpenter                             Taste\n      4:           Sabrina Carpenter                          Espresso\n      5:                       Jimin                               Who\n     ---                                                              \n1179449:                  Drake, SZA         Slime You Out (feat. SZA)\n1179450:        Offset, Travis Scott SAY MY GRACE (feat. Travis Scott)\n1179451:                    Libianca                            People\n1179452:                           V                        Rainy Days\n1179453: cassö, RAYE, D-Block Europe                             Prada"
  },
  {
    "objectID": "tema6.html",
    "href": "tema6.html",
    "title": "Ejercicios",
    "section": "",
    "text": "Ejercicio 1\nEres un analista de datos en una plataforma de streaming musical. Tu jefe te ha pedido que analices las tendencias de 73 paises para contestar las siguietes preguntas:\n\n¿Cuáles son los 5 álbumes más populares y cómo ha evolucionado su popularidad promedio (medida a través del ranking de las canciones de cada album) a lo largo del tiempo (mensualmente) en nuestra plataforma de streaming? (muestralo en un gráfico)\n\n\n\n\n\n\n\nRespuesta\n\n\n\n\n\n\n\nCode\ndata[, snapshot_month := format(snapshot_date, \"%Y-%m\")]\n\nmost_popular_5 &lt;- data[,.N,by = album_name][order(-N),][1:5,]$album_name\n\ndata[album_name %in% most_popular_5,.(mean_month_rank = mean(daily_rank)), by = .(album_name,snapshot_month)] %&gt;% \n  ggplot(aes(x = snapshot_month, y = mean_month_rank,color = album_name, group = album_name))+\n  geom_line()+\n  geom_point()+\n  labs(color = \"Top5 albumes\", y = \"Ranking promedio mensual\", x = \"Mes\")+\n  scale_y_reverse(limits = c(50,1))+\n  theme_bw()\n\n\n\n\n\n\n\n\n\n\n\nEjercicio 2\n2. ¿Cuáles son los 5 artistas que han mantenido una popularidad más constante a nivel internacional a lo largo del tiempo? En este caso vamos a considerar la popularidad como el número de paises en el que un artista es escuchado en el top50.\nEn particular debes:\n\nCalcular el número de países en los que la música de cada artista es popular para cada mes.\nIdentificar a los 5 mejores artistas que aparecen de manera consistente en la mayor cantidad de países durante el período de tiempo dado.\nVisualizar las tendencias de popularidad mensual de estos 5 mejores artistas, destacando el primer mes en que aparecieron en el conjunto de datos.\n\n\n\n\n\n\n\nRespuesta\n\n\n\n\n\n\n\nCode\npopularity_artists &lt;- data[,.N, by = .(artists,country,snapshot_month)][,.(ncountry = .N), by = .(artists, snapshot_month)][,head(.SD, 5),by = snapshot_month]\n\ntop_consistent_5 &lt;- popularity_artists[,.N,by = artists][order(-N)][1:5]$artists\n\nmin_dates &lt;- popularity_artists[artists %in% top_consistent_5, .(min_date = min(snapshot_month)), by = artists]\nlabels &lt;- merge(min_dates, popularity_artists, by.x = c(\"artists\", \"min_date\"), by.y = c(\"artists\", \"snapshot_month\"))\n\nggplot(data = popularity_artists, aes(x = snapshot_month, y = ncountry, group = artists))+\ngeom_line(color = \"gray\")+\ngeom_line(data = popularity_artists[artists %in% top_consistent_5], aes(color = artists))+\ngeom_point()+\ngeom_text(data = labels, aes(x = min_date, label = artists))+\ntheme_bw()+\ntheme(legend.position = \"bottom\")+\nlabs(y = \"Numero de paises\", x = \"Mes\", color = \"Artistas más consistentes\")\n\n\n\n\n\n\n\n\n\n\n\nEjercicio 3\n3. Se busca encontrar patrones entre las características de las canciones populares de cada pais. Por ejemplo: ¿existen diferencias entre el tipo de canciones (felices o tristes) que escuchan paises de diferentes continentes?\nNota: El archivo country.codes.csv tiene la relación entre los códigos de los paises, los nombres de los paises y el continente al que pertenecen. Puedes utilizar funciones del paquete dplyr (left_join()) para unir las tablas.\n\n\n\n\n\n\nRespuesta\n\n\n\n\n\n\n\nCode\nlibrary(tidyverse)\n\ncountry_codes &lt;- fread(\"data/country_codes.csv\")\n\nvalence_data &lt;- data[country != \"\",.(avg_valence = mean(valence)), by = .(snapshot_month,country)] %&gt;% \n  left_join(.,country_codes, by = c(\"country\" = \"Code\"))\n\nmean_valence_continent &lt;- valence_data[,.(avg_valence = mean(avg_valence)), by = .(snapshot_month,Continent)]\n\nvalence_data  %&gt;% \n    ggplot(aes(x = snapshot_month, y = avg_valence, group = country, color = Continent))+\n    geom_line(data = mean_valence_continent, aes(group = Continent), size = 1)+\n    geom_vline(xintercept = format(as.Date(\"2023-12-01\"), \"%Y-%m\"), linetype = \"dashed\")+\n    labs(y = \"Valencia\", x = \"Mes\", color = \"Continente\")+\n    scale_y_continuous(limits = c(0,1))+\n    theme_bw()\n\n\n\n\n\nValencia promedio por pais y por continente. La valencia se define como una medida de 0.0 a 1.0 que describe la positividad musical que transmite una pista. Las pistas con alta valencia suenan más positivas (por ejemplo, felices, alegres, eufóricas), mientras que las pistas con baja valencia suenan más negativas (por ejemplo, tristes, deprimidas, enojadas).\n\n\n\n\n\n\n\n\n\n\nEjercicio 4\nA continuación se muestran las definiciones de las características de las canciones:\n\n\n\nPopularity: número total de reproducciones que ha tenido la pista y cuán recientes son esas reproducciones.\nAcousticness: Una medida de confianza de 0.0 a 1.0 sobre si la pista es acústica. Un valor de 1.0 representa alta confianza en que la pista es acústica.\nDanceability: La bailabilidad describe cuán adecuada es una pista para bailar, basada en una combinación de elementos musicales que incluyen tempo, estabilidad del ritmo, fuerza del compás y regularidad general.\nEnergy: La energía es una medida de 0.0 a 1.0 que representa una percepción de la intensidad y la actividad. Generalmente, las pistas energéticas se sienten rápidas, fuertes y ruidosas.\nInstrumentalness: Predice si una pista no contiene voces. Los sonidos como “Ooh” y “aah” se tratan como instrumentales en este contexto. Las pistas de rap o palabra hablada se consideran claramente “vocales”. Cuanto más cercano esté el valor de instrumentalidad a 1.0, mayor es la probabilidad de que la pista no contenga contenido vocal. Los valores superiores a 0.5 están destinados a representar pistas instrumentales, pero la confianza aumenta a medida que el valor se acerca a 1.0.\nLiveness: Detecta la presencia de una audiencia en la grabación. Valores más altos de vivacidad representan una mayor probabilidad de que la pista haya sido interpretada en vivo.\nLoudness: La sonoridad general de una pista en decibelios (dB). Los valores de sonoridad se promedian en toda la pista y son útiles para comparar la sonoridad relativa de las pistas. La sonoridad es la cualidad de un sonido que se correlaciona psicológicamente con la fuerza física (amplitud).\nMode: El modo indica la modalidad (mayor o menor) de una pista, el tipo de escala del cual se deriva su contenido melódico. Mayor se representa con 1 y menor con 0.\nSpeechiness: Detecta la presencia de palabras habladas en una pista. Cuanto más se asemeje la grabación exclusivamente al habla (por ejemplo, programa de entrevistas, audiolibro, poesía), más cercano estará el valor de este atributo a 1.0. Los valores superiores a 0.66 describen pistas que probablemente están compuestas completamente de palabras habladas. Los valores entre 0.33 y 0.66 describen pistas que pueden contener tanto música como habla, ya sea en secciones o superpuestas, como en el caso del rap. Los valores por debajo de 0.33 probablemente representan música u otras pistas que no contienen mucha letra.\nTempo: El tempo estimado general de una pista en pulsaciones por minuto (BPM). En terminología musical, el tempo es la velocidad o el ritmo de una pieza determinada y se deriva directamente de la duración promedio de cada pulso.\nValence: Una medida de 0.0 a 1.0 que describe la positividad musical que transmite una pista. Las pistas con alta valencia suenan más positivas (por ejemplo, felices, alegres, eufóricas), mientras que las pistas con baja valencia suenan más negativas (por ejemplo, tristes, deprimidas, enojadas).\n\n\n\n4. Utilizando las características de las canciones hipotetiza acerca del tipo de relaciones y las diferencias entre las canciones de diferentes regiones del mundo."
  },
  {
    "objectID": "tema6.html#ejercicios",
    "href": "tema6.html#ejercicios",
    "title": "Ejercicios",
    "section": "",
    "text": "Eres un analista de datos en una plataforma de streaming musical. Tu jefe te ha pedido que analices las tendencias de 73 paises para contestar las siguietes preguntas:\n\n¿Cuáles son los 5 álbumes más populares y cómo ha evolucionado su popularidad promedio (medida a través del ranking de las canciones de cada album) a lo largo del tiempo (mensualmente) en nuestra plataforma de streaming? (muestralo en un gráfico)\n\n\n\n\n\n\n\nRespuesta\n\n\n\n\n\n\n\nCode\ndata[, snapshot_month := format(snapshot_date, \"%Y-%m\")]\n\nmost_popular_5 &lt;- data[,.N,by = album_name][order(-N),][1:5,]$album_name\n\ndata[album_name %in% most_popular_5,.(mean_month_rank = mean(daily_rank)), by = .(album_name,snapshot_month)] %&gt;% \n  ggplot(aes(x = snapshot_month, y = mean_month_rank,color = album_name, group = album_name))+\n  geom_line()+\n  geom_point()+\n  labs(color = \"Top5 albumes\", y = \"Ranking promedio mensual\", x = \"Mes\")+\n  scale_y_reverse(limits = c(50,1))+\n  theme_bw()\n\n\n\n\n\n\n\n\n\n2. ¿Cuáles son los 5 artistas que han mantenido una popularidad más constante a nivel internacional a lo largo del tiempo? En este caso vamos a considerar la popularidad como el número de paises en el que un artista es escuchado en el top50.\nEn particular debes:\n\nCalcular el número de países en los que la música de cada artista es popular para cada mes.\nIdentificar a los 5 mejores artistas que aparecen de manera consistente en la mayor cantidad de países durante el período de tiempo dado.\nVisualizar las tendencias de popularidad mensual de estos 5 mejores artistas, destacando el primer mes en que aparecieron en el conjunto de datos.\n\n\n\n\n\n\n\nRespuesta\n\n\n\n\n\n\n\nCode\npopularity_artists &lt;- data[,.N, by = .(artists,country,snapshot_month)][,.(ncountry = .N), by = .(artists, snapshot_month)][,head(.SD, 5),by = snapshot_month]\n\ntop_consistent_5 &lt;- popularity_artists[,.N,by = artists][order(-N)][1:5]$artists\n\nmin_dates &lt;- popularity_artists[artists %in% top_consistent_5, .(min_date = min(snapshot_month)), by = artists]\nlabels &lt;- merge(min_dates, popularity_artists, by.x = c(\"artists\", \"min_date\"), by.y = c(\"artists\", \"snapshot_month\"))\n\nggplot(data = popularity_artists, aes(x = snapshot_month, y = ncountry, group = artists))+\ngeom_line(color = \"gray\")+\ngeom_line(data = popularity_artists[artists %in% top_consistent_5], aes(color = artists))+\ngeom_point()+\ngeom_text(data = labels, aes(x = min_date, label = artists))+\ntheme_bw()+\ntheme(legend.position = \"bottom\")+\nlabs(y = \"Numero de paises\", x = \"Mes\", color = \"Artistas más consistentes\")\n\n\n\n\n\n\n\n\n\n3. Se busca encontrar patrones entre las características de las canciones populares de cada pais. Por ejemplo: ¿existen diferencias entre el tipo de canciones (felices o tristes) que escuchan paises de diferentes continentes?\nNota: El archivo country.codes.csv tiene la relación entre los códigos de los paises, los nombres de los paises y el continente al que pertenecen. Puedes utilizar funciones del paquete dplyr (left_join()) para unir las tablas.\n\n\n\n\n\n\nRespuesta\n\n\n\n\n\n\n\nCode\nlibrary(tidyverse)\n\ncountry_codes &lt;- fread(\"data/country_codes.csv\")\n\nvalence_data &lt;- data[country != \"\",.(avg_valence = mean(valence)), by = .(snapshot_month,country)] %&gt;% \n  left_join(.,country_codes, by = c(\"country\" = \"Code\")) \n\nmin_val &lt;- valence_data[avg_valence == min(avg_valence),]\n\nmean_valence_continent &lt;- valence_data[,.(avg_valence = mean(avg_valence)), by = .(snapshot_month,Continent)]\n\nvalence_data  %&gt;% \n    ggplot(aes(x = snapshot_month, y = avg_valence, group = country, color = Continent))+\n    # geom_line(alpha = 0.5)+\n    geom_line(data = mean_valence_continent, aes(group = Continent), size = 1.5)+\n    geom_text(data = min_val, aes(label = Country), nudge_y = -0.005)+\n    geom_vline(xintercept = format(as.Date(\"2023-12-01\"), \"%Y-%m\"), linetype = \"dashed\")+\n    labs(y = \"Valencia\", x = \"Mes\", color = \"Continente\")+\n    theme_bw()\n\n\n\n\n\nValencia promedio por pais y por continente. La valencia se define como una medida de 0.0 a 1.0 que describe la positividad musical que transmite una pista. Las pistas con alta valencia suenan más positivas (por ejemplo, felices, alegres, eufóricas), mientras que las pistas con baja valencia suenan más negativas (por ejemplo, tristes, deprimidas, enojadas).\n\n\n\n\n\n\n\n\nA continuación se muestran las definiciones de las características de las canciones:\n\n\n\nPopularity: número total de reproducciones que ha tenido la pista y cuán recientes son esas reproducciones.\nAcousticness: Una medida de confianza de 0.0 a 1.0 sobre si la pista es acústica. Un valor de 1.0 representa alta confianza en que la pista es acústica.\nDanceability: La bailabilidad describe cuán adecuada es una pista para bailar, basada en una combinación de elementos musicales que incluyen tempo, estabilidad del ritmo, fuerza del compás y regularidad general.\nEnergy: La energía es una medida de 0.0 a 1.0 que representa una percepción de la intensidad y la actividad. Generalmente, las pistas energéticas se sienten rápidas, fuertes y ruidosas.\nInstrumentalness: Predice si una pista no contiene voces. Los sonidos como “Ooh” y “aah” se tratan como instrumentales en este contexto. Las pistas de rap o palabra hablada se consideran claramente “vocales”. Cuanto más cercano esté el valor de instrumentalidad a 1.0, mayor es la probabilidad de que la pista no contenga contenido vocal. Los valores superiores a 0.5 están destinados a representar pistas instrumentales, pero la confianza aumenta a medida que el valor se acerca a 1.0.\nLiveness: Detecta la presencia de una audiencia en la grabación. Valores más altos de vivacidad representan una mayor probabilidad de que la pista haya sido interpretada en vivo.\nLoudness: La sonoridad general de una pista en decibelios (dB). Los valores de sonoridad se promedian en toda la pista y son útiles para comparar la sonoridad relativa de las pistas. La sonoridad es la cualidad de un sonido que se correlaciona psicológicamente con la fuerza física (amplitud).\nMode: El modo indica la modalidad (mayor o menor) de una pista, el tipo de escala del cual se deriva su contenido melódico. Mayor se representa con 1 y menor con 0.\nSpeechiness: Detecta la presencia de palabras habladas en una pista. Cuanto más se asemeje la grabación exclusivamente al habla (por ejemplo, programa de entrevistas, audiolibro, poesía), más cercano estará el valor de este atributo a 1.0. Los valores superiores a 0.66 describen pistas que probablemente están compuestas completamente de palabras habladas. Los valores entre 0.33 y 0.66 describen pistas que pueden contener tanto música como habla, ya sea en secciones o superpuestas, como en el caso del rap. Los valores por debajo de 0.33 probablemente representan música u otras pistas que no contienen mucha letra.\nTempo: El tempo estimado general de una pista en pulsaciones por minuto (BPM). En terminología musical, el tempo es la velocidad o el ritmo de una pieza determinada y se deriva directamente de la duración promedio de cada pulso.\nValence: Una medida de 0.0 a 1.0 que describe la positividad musical que transmite una pista. Las pistas con alta valencia suenan más positivas (por ejemplo, felices, alegres, eufóricas), mientras que las pistas con baja valencia suenan más negativas (por ejemplo, tristes, deprimidas, enojadas).\n\n\n\n4. Utilizando las características de las canciones hipotetiza acerca del tipo de relaciones y las diferencias entre las canciones de diferentes regiones del mundo."
  },
  {
    "objectID": "tema5.html#cadenas-de-operaciones",
    "href": "tema5.html#cadenas-de-operaciones",
    "title": "Agrupación y cadenas de operaciones",
    "section": "Cadenas de operaciones",
    "text": "Cadenas de operaciones\nUna función muy importante del paquete es la capacidad de encadenar operaciones en un mismo comando sin necesidad de guardar el resultado en algun objeto.\nEs una función que se puede entender de manera similar al uso del pipe %&gt;% o |&gt; en tidyverse o rbase. En data table se pueden evaluar una serie de expresiones una después de la otra escribiendolas entre corchetes de esta manera:\nDT[ ... ][ ... ][ ... ]\no de forma vertical\nDT[ ...\n   ][ ...\n     ][ ...\n       ]\nPor ejemplo, recapitulando temas anteriores ¿cómo contarías el número de paises en los que una canción ha estado en el top 50?\n\ndata[,.N, by = .(name,country)][,.(ncountry = .N), by = name]\n\n                            name ncountry\n                          &lt;char&gt;    &lt;int&gt;\n    1:          Die With A Smile       61\n    2:        BIRDS OF A FEATHER       62\n    3:                     Taste       49\n    4:                  Espresso       62\n    5:                       Who       48\n   ---                                   \n13332:                     Tsiou        1\n13333:              Mexri Telous        1\n13334:           Virtuální drogy        1\n13335: AMBIENTE ERRADO - Ao Vivo        1\n13336:     Oficializar - Ao Vivo        1\n\n\nEn realidad los corchetes consecutivos es una funcionalidad que viene desde R base. Por ejemplo, podemos seleccionar las primeras 10 filas del df data y después seleccionar las primeras dos.\n\nas.data.frame(data)[1:10,][1:2,]\n\n              spotify_id               name               artists daily_rank daily_movement weekly_movement country\n1 2plbrEY59IikOBgBGLjaoe   Die With A Smile Lady Gaga, Bruno Mars          1              0               0        \n2 6dOtVTDdiauQNBQEDOtlAB BIRDS OF A FEATHER         Billie Eilish          2              0               0        \n  snapshot_date popularity is_explicit duration_ms           album_name album_release_date danceability energy key\n1    2024-09-08         97       FALSE      251667     Die With A Smile         2024-08-16        0.521  0.592   6\n2    2024-09-08        100       FALSE      210373 HIT ME HARD AND SOFT         2024-05-17        0.747  0.507   2\n  loudness mode speechiness acousticness instrumentalness liveness valence   tempo time_signature\n1   -7.777    0      0.0304        0.308           0.0000    0.122   0.535 157.969              3\n2  -10.171    1      0.0358        0.200           0.0608    0.117   0.438 104.978              4"
  },
  {
    "objectID": "tema5.html#agrupación-por-expresión",
    "href": "tema5.html#agrupación-por-expresión",
    "title": "Agrupación y cadenas de operaciones",
    "section": "Agrupación por expresión",
    "text": "Agrupación por expresión\nEl espacio by también nos permite formar los grupos directamente de una expresión. Por ejemplo, si quisieramos contar el número de canciones en cada pais que tienen una popularidad mayor a 80.\n\ndata[,.N,by = .(country,PopAbove80 = popularity &gt; 80)] %&gt;% head()\n\n   country PopAbove80     N\n    &lt;char&gt;     &lt;lgcl&gt; &lt;int&gt;\n1:               TRUE 14869\n2:              FALSE  1138\n3:      ZA      FALSE 10786\n4:      ZA       TRUE  5244\n5:      VN       TRUE  2622\n6:      VN      FALSE 13634\n\n\n\n\n\n\n\n\nEjercicio\n\n\n\n\n\nCalcula cuántas veces una canción ha sido ranqueada como la número 1 (para cualquier pais). Muestra las 5 canciones que hayan tenido el ranking 1 más veces.\n\n\n\n\n\n\n\n\n\nRespuesta\n\n\n\n\n\n\n\nCode\nfreq_num1 &lt;- data[,.N,by = .(name,num1 = daily_rank == 1)]\nfreq_num1[num1 == T] %&gt;% .[order(-N)] %&gt;% .[1:5]\n\n\n                           name   num1     N\n                         &lt;char&gt; &lt;lgcl&gt; &lt;int&gt;\n1:                         LUNA   TRUE  1015\n2:                          Who   TRUE   624\n3:   i like the way you kiss me   TRUE   570\n4: Si Antes Te Hubiera Conocido   TRUE   531\n5:                    La Diabla   TRUE   505"
  }
]